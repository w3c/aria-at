// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`V1 test format version runs createAllTests successfully (banner) 1`] = `
"{
  "navigate forwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "R" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ]
      ],
      "nvda": [
        [ "D" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ],
        [ "K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  },
  "navigate backwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ],
        [ "SHIFT_K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  },
  "navigate forwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "DOWN" ], [ "U" ] ],
      "nvda": [ [ "DOWN" ], [ "U" ], [ "K" ] ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  },
  "navigate backwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "UP" ], [ "SHIFT_U" ] ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_K" ],
        [ "SHIFT_U" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  },
  "navigate forwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ],
      "nvda": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_J" ],
        [ "TAB" ]
      ]
    }
  },
  "navigate backwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_J" ],
        [ "SHIFT_TAB" ]
      ]
    }
  },
  "navigate forwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "G" ] ],
      "nvda": [ [ "G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_G" ] ]
    }
  },
  "navigate backwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "SHIFT_G" ] ],
      "nvda": [ [ "SHIFT_G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_G" ] ]
    }
  },
  "navigate forwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [ [ "H" ], [ "ONE" ] ],
      "nvda": [ [ "H" ], [ "ONE" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_H" ] ]
    }
  },
  "navigate backwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ],
      "nvda": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_H" ] ]
    }
  }
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 2`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <title>Index of Assistive Technology Test Files</title>
  <style>
    table {
      display: table;
      border-collapse: collapse;
      border-spacing: 2px;
      border-color: rgb(128,128,128);
    }

    thead {
      display: table-row-group;
      vertical-align: middle;
      border-bottom: black solid 2px;
    }

    tbody {
      display: table-row-group;
      vertical-align: middle;
      border-color: rgb(128,128,128);
    }

    tr:nth-child(even) {background: #DDD}
    tr:nth-child(odd) {background: #FFF}

    tr {
      display: table-row;
      vertical-align: inherit;
      border-color: rgb(128,128,128);
    }

    td {
      padding: 3px;
      display: table-cell;
    }

    td.test {
      text-align: center;
    }

    td.none {
      color: #333;
    }

    th {
      padding: 3px;
      font-weight: bold;
      display: table-cell;
    }
  </style>
</head>
<body>
 <main>
  <h1>Index of Assistive Technology Test Files</h1>
  <p>This is useful for viewing the local files on a local web server.</p>
  <table>
    <thead>
      <tr>
        <th>Task ID</th>
        <th>Testing Task</th>
        <th>JAWS</th>
<th>NVDA</th>
<th>VoiceOver for macOS</th>

        <th>Setup Script Reference</th>
      </tr>
    </thead>
    <tbody>
<tr><td>1</td><td scope="row">Navigate forwards into a banner landmark in reading mode</td><td class="test"><a href="test-01-navigate-forwards-into-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 1">JAWS</a></td><td class="test"><a href="test-01-navigate-forwards-into-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 1">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBanner</td></tr>
<tr><td>2</td><td scope="row">Navigate forwards into a banner landmark in interaction mode</td><td class="test"><a href="test-02-navigate-forwards-into-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 2">JAWS</a></td><td class="test"><a href="test-02-navigate-forwards-into-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 2">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBanner</td></tr>
<tr><td>3</td><td scope="row">Navigate forwards into a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-03-navigate-forwards-into-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 3">VoiceOver for macOS</a></td><td>setFocusBeforeBanner</td></tr>
<tr><td>4</td><td scope="row">Navigate backwards into a banner landmark in reading mode</td><td class="test"><a href="test-04-navigate-backwards-into-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 4">JAWS</a></td><td class="test"><a href="test-04-navigate-backwards-into-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 4">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBanner</td></tr>
<tr><td>5</td><td scope="row">Navigate backwards into a banner landmark in interaction mode</td><td class="test"><a href="test-05-navigate-backwards-into-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 5">JAWS</a></td><td class="test"><a href="test-05-navigate-backwards-into-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 5">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBanner</td></tr>
<tr><td>6</td><td scope="row">Navigate backwards into a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-06-navigate-backwards-into-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 6">VoiceOver for macOS</a></td><td>setFocusAfterBanner</td></tr>
<tr><td>7</td><td scope="row">Navigate forwards out of a banner landmark in reading mode</td><td class="test"><a href="test-07-navigate-forwards-out-of-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 7">JAWS</a></td><td class="test"><a href="test-07-navigate-forwards-out-of-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 7">NVDA</a></td><td class="test none">not included</td><td>setFocusOnBottomLink</td></tr>
<tr><td>8</td><td scope="row">Navigate forwards out of a banner landmark in interaction mode</td><td class="test"><a href="test-08-navigate-forwards-out-of-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 8">JAWS</a></td><td class="test"><a href="test-08-navigate-forwards-out-of-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 8">NVDA</a></td><td class="test none">not included</td><td>setFocusOnBottomLink</td></tr>
<tr><td>9</td><td scope="row">Navigate forwards out of a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-09-navigate-forwards-out-of-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 9">VoiceOver for macOS</a></td><td>setFocusOnBottomLink</td></tr>
<tr><td>10</td><td scope="row">Navigate backwards out of a banner landmark in reading mode</td><td class="test"><a href="test-10-navigate-backwards-out-of-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 10">JAWS</a></td><td class="test"><a href="test-10-navigate-backwards-out-of-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 10">NVDA</a></td><td class="test none">not included</td><td>setFocusOnTopLink</td></tr>
<tr><td>11</td><td scope="row">Navigate backwards out of a banner landmark in interaction mode</td><td class="test"><a href="test-11-navigate-backwards-out-of-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 11">JAWS</a></td><td class="test"><a href="test-11-navigate-backwards-out-of-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 11">NVDA</a></td><td class="test none">not included</td><td>setFocusOnTopLink</td></tr>
<tr><td>12</td><td scope="row">Navigate backwards out of a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-12-navigate-backwards-out-of-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 12">VoiceOver for macOS</a></td><td>setFocusOnTopLink</td></tr>
<tr><td>13</td><td scope="row">Navigate forwards to a button inside a banner landmark in reading mode</td><td class="test"><a href="test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 13">JAWS</a></td><td class="test"><a href="test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 13">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBannerAndHideTopLink</td></tr>
<tr><td>14</td><td scope="row">Navigate forwards to a button inside a banner landmark in interaction mode</td><td class="test"><a href="test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 14">JAWS</a></td><td class="test"><a href="test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 14">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBannerAndHideTopLink</td></tr>
<tr><td>15</td><td scope="row">Navigate forwards to a button inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-15-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 15">VoiceOver for macOS</a></td><td>setFocusBeforeBannerAndHideTopLink</td></tr>
<tr><td>16</td><td scope="row">Navigate backwards to a button inside a banner landmark in reading mode</td><td class="test"><a href="test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 16">JAWS</a></td><td class="test"><a href="test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 16">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBannerAndHideBottomLink</td></tr>
<tr><td>17</td><td scope="row">Navigate backwards to a button inside a banner landmark in interaction mode</td><td class="test"><a href="test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 17">JAWS</a></td><td class="test"><a href="test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 17">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBannerAndHideBottomLink</td></tr>
<tr><td>18</td><td scope="row">Navigate backwards to a button inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-18-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 18">VoiceOver for macOS</a></td><td>setFocusAfterBannerAndHideBottomLink</td></tr>
<tr><td>19</td><td scope="row">Navigate forwards to an image inside a banner landmark in reading mode</td><td class="test"><a href="test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 19">JAWS</a></td><td class="test"><a href="test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 19">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBanner</td></tr>
<tr><td>20</td><td scope="row">Navigate forwards to an image inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-20-navigate-forwards-to-an-image-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 20">VoiceOver for macOS</a></td><td>setFocusBeforeBanner</td></tr>
<tr><td>21</td><td scope="row">Navigate backwards to an image inside a banner landmark in reading mode</td><td class="test"><a href="test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 21">JAWS</a></td><td class="test"><a href="test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 21">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBanner</td></tr>
<tr><td>22</td><td scope="row">Navigate backwards to an image inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-22-navigate-backwards-to-an-image-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 22">VoiceOver for macOS</a></td><td>setFocusAfterBanner</td></tr>
<tr><td>23</td><td scope="row">Navigate forwards to a heading inside a banner landmark in reading mode</td><td class="test"><a href="test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 23">JAWS</a></td><td class="test"><a href="test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 23">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBanner</td></tr>
<tr><td>24</td><td scope="row">Navigate forwards to a heading inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-24-navigate-forwards-to-a-heading-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 24">VoiceOver for macOS</a></td><td>setFocusBeforeBanner</td></tr>
<tr><td>25</td><td scope="row">Navigate backwards to a heading inside a banner landmark in reading mode</td><td class="test"><a href="test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 25">JAWS</a></td><td class="test"><a href="test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 25">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBanner</td></tr>
<tr><td>26</td><td scope="row">Navigate backwards to a heading inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-26-navigate-backwards-to-a-heading-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 26">VoiceOver for macOS</a></td><td>setFocusAfterBanner</td></tr>

    </tbody>
  </table>
  </main>
</body>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 3`] = `
"window[document.currentScript.getAttribute("jsonpFunction") || "scriptsJsonpLoaded"]({
  setFocusAfterBanner(testPageDocument) {
    // sets focus on a link after the banner landmark
    testPageDocument.getElementById('afterlink').focus();
  },
  setFocusAfterBannerAndHideBottomLink(testPageDocument) {
    // sets focus on a link after the banner landmark, and hides the last link inside the landmark region
    testPageDocument.getElementById('bottom').setAttribute('hidden', '');
    testPageDocument.getElementById('afterlink').focus();
  },
  setFocusBeforeBanner(testPageDocument) {
    // sets focus on a link before the banner landmark
    testPageDocument.getElementById('beforelink').focus();
  },
  setFocusBeforeBannerAndHideTopLink(testPageDocument) {
    // sets focus on a link before the banner landmark, and hides the first link inside the landmark region
    testPageDocument.getElementById('top').setAttribute('hidden', '');
    testPageDocument.getElementById('beforelink').focus();
  },
  setFocusOnBottomLink(testPageDocument) {
    // sets focus on the 'Bottom' link
    testPageDocument.getElementById('bottom').focus();
  },
  setFocusOnTopLink(testPageDocument) {
    // sets focus on the 'Top' link
    testPageDocument.getElementById('top').focus();
  }
});
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 4`] = `
"export function setFocusAfterBanner(testPageDocument) {
  // sets focus on a link after the banner landmark
  testPageDocument.getElementById('afterlink').focus();
}

export function setFocusAfterBannerAndHideBottomLink(testPageDocument) {
  // sets focus on a link after the banner landmark, and hides the last link inside the landmark region
  testPageDocument.getElementById('bottom').setAttribute('hidden', '');
  testPageDocument.getElementById('afterlink').focus();
}

export function setFocusBeforeBanner(testPageDocument) {
  // sets focus on a link before the banner landmark
  testPageDocument.getElementById('beforelink').focus();
}

export function setFocusBeforeBannerAndHideTopLink(testPageDocument) {
  // sets focus on a link before the banner landmark, and hides the first link inside the landmark region
  testPageDocument.getElementById('top').setAttribute('hidden', '');
  testPageDocument.getElementById('beforelink').focus();
}

export function setFocusOnBottomLink(testPageDocument) {
  // sets focus on the 'Bottom' link
  testPageDocument.getElementById('bottom').focus();
}

export function setFocusOnTopLink(testPageDocument) {
  // sets focus on the 'Top' link
  testPageDocument.getElementById('top').focus();
}
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 5`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-01-navigate-forwards-into-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-01-navigate-forwards-into-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 6`] = `
"{
  "info": {
    "testId": 1,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "R",
      "keystroke": "R",
      "keypresses": [
        {
          "id": "R",
          "keystroke": "R"
        }
      ]
    },
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    },
    {
      "id": "U",
      "keystroke": "U",
      "keypresses": [
        {
          "id": "U",
          "keystroke": "U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 7`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-01-navigate-forwards-into-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-01-navigate-forwards-into-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 8`] = `
"{
  "info": {
    "testId": 1,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "D",
      "keystroke": "D",
      "keypresses": [
        {
          "id": "D",
          "keystroke": "D"
        }
      ]
    },
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    },
    {
      "id": "U",
      "keystroke": "U",
      "keypresses": [
        {
          "id": "U",
          "keystroke": "U"
        }
      ]
    },
    {
      "id": "K",
      "keystroke": "K",
      "keypresses": [
        {
          "id": "K",
          "keystroke": "K"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 9`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards into a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards into a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "R" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ]
      ],
      "nvda": [
        [ "D" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ],
        [ "K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 10`] = `
"{
  "task": "navigate forwards into a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 11`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-02-navigate-forwards-into-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-02-navigate-forwards-into-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 12`] = `
"{
  "info": {
    "testId": 2,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 13`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-02-navigate-forwards-into-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-02-navigate-forwards-into-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 14`] = `
"{
  "info": {
    "testId": 2,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 15`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards into a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "R" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ]
      ],
      "nvda": [
        [ "D" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ],
        [ "K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 16`] = `
"{
  "task": "navigate forwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 17`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-03-navigate-forwards-into-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-03-navigate-forwards-into-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 18`] = `
"{
  "info": {
    "testId": 3,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT",
      "keystroke": "Control+Option+Right, then Control+Option+Right",
      "keypresses": [
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        },
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        }
      ]
    },
    {
      "id": "CTRL_OPT_CMD_L",
      "keystroke": "Control+Option+Command+L",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_L",
          "keystroke": "Control+Option+Command+L"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 19`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards into a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "R" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ]
      ],
      "nvda": [
        [ "D" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ],
        [ "K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 20`] = `
"{
  "task": "navigate forwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 21`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-04-navigate-backwards-into-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-04-navigate-backwards-into-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 22`] = `
"{
  "info": {
    "testId": 4,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    },
    {
      "id": "SHIFT_U",
      "keystroke": "Shift+U",
      "keypresses": [
        {
          "id": "SHIFT_U",
          "keystroke": "Shift+U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 23`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-04-navigate-backwards-into-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-04-navigate-backwards-into-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 24`] = `
"{
  "info": {
    "testId": 4,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    },
    {
      "id": "SHIFT_U",
      "keystroke": "Shift+U",
      "keypresses": [
        {
          "id": "SHIFT_U",
          "keystroke": "Shift+U"
        }
      ]
    },
    {
      "id": "SHIFT_K",
      "keystroke": "Shift+K",
      "keypresses": [
        {
          "id": "SHIFT_K",
          "keystroke": "Shift+K"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 25`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards into a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards into a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ],
        [ "SHIFT_K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 26`] = `
"{
  "task": "navigate backwards into a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 27`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-05-navigate-backwards-into-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navigate-backwards-into-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 28`] = `
"{
  "info": {
    "testId": 5,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 29`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-05-navigate-backwards-into-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navigate-backwards-into-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 30`] = `
"{
  "info": {
    "testId": 5,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 31`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards into a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ],
        [ "SHIFT_K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 32`] = `
"{
  "task": "navigate backwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 33`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-06-navigate-backwards-into-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navigate-backwards-into-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 34`] = `
"{
  "info": {
    "testId": 6,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_LEFT,CTRL_OPT_LEFT",
      "keystroke": "Ctrl+Option+Left, then Ctrl+Option+Left",
      "keypresses": [
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        },
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        }
      ]
    },
    {
      "id": "SHIFT_CTRL_OPT_CMD_L",
      "keystroke": "Shift+Control+Option+Command+L",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_L",
          "keystroke": "Shift+Control+Option+Command+L"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 35`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards into a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ],
        [ "SHIFT_K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 36`] = `
"{
  "task": "navigate backwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 37`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-07-navigate-forwards-out-of-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-07-navigate-forwards-out-of-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 38`] = `
"{
  "info": {
    "testId": 7,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "U",
      "keystroke": "U",
      "keypresses": [
        {
          "id": "U",
          "keystroke": "U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 39`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-07-navigate-forwards-out-of-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-07-navigate-forwards-out-of-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 40`] = `
"{
  "info": {
    "testId": 7,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "U",
      "keystroke": "U",
      "keypresses": [
        {
          "id": "U",
          "keystroke": "U"
        }
      ]
    },
    {
      "id": "K",
      "keystroke": "K",
      "keypresses": [
        {
          "id": "K",
          "keystroke": "K"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 41`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards out of a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnBottomLink: function(testPageDocument){
			// sets focus on the 'Bottom' link
			testPageDocument.getElementById('bottom').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards out of a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "DOWN" ], [ "U" ] ],
      "nvda": [ [ "DOWN" ], [ "U" ], [ "K" ] ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnBottomLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 42`] = `
"{
  "task": "navigate forwards out of a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 43`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-08-navigate-forwards-out-of-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-08-navigate-forwards-out-of-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 44`] = `
"{
  "info": {
    "testId": 8,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 45`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-08-navigate-forwards-out-of-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-08-navigate-forwards-out-of-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 46`] = `
"{
  "info": {
    "testId": 8,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 47`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards out of a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnBottomLink: function(testPageDocument){
			// sets focus on the 'Bottom' link
			testPageDocument.getElementById('bottom').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "DOWN" ], [ "U" ] ],
      "nvda": [ [ "DOWN" ], [ "U" ], [ "K" ] ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnBottomLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 48`] = `
"{
  "task": "navigate forwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 49`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-09-navigate-forwards-out-of-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-navigate-forwards-out-of-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 50`] = `
"{
  "info": {
    "testId": 9,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT",
      "keystroke": "Control+Option+Right, then Control+Option+Right",
      "keypresses": [
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        },
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        }
      ]
    },
    {
      "id": "CTRL_OPT_CMD_L",
      "keystroke": "Control+Option+Command+L",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_L",
          "keystroke": "Control+Option+Command+L"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 51`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards out of a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnBottomLink: function(testPageDocument){
			// sets focus on the 'Bottom' link
			testPageDocument.getElementById('bottom').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "DOWN" ], [ "U" ] ],
      "nvda": [ [ "DOWN" ], [ "U" ], [ "K" ] ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnBottomLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 52`] = `
"{
  "task": "navigate forwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 53`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-10-navigate-backwards-out-of-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-10-navigate-backwards-out-of-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 54`] = `
"{
  "info": {
    "testId": 10,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_U",
      "keystroke": "Shift+U",
      "keypresses": [
        {
          "id": "SHIFT_U",
          "keystroke": "Shift+U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 55`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-10-navigate-backwards-out-of-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-10-navigate-backwards-out-of-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 56`] = `
"{
  "info": {
    "testId": 10,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_K",
      "keystroke": "Shift+K",
      "keypresses": [
        {
          "id": "SHIFT_K",
          "keystroke": "Shift+K"
        }
      ]
    },
    {
      "id": "SHIFT_U",
      "keystroke": "Shift+U",
      "keypresses": [
        {
          "id": "SHIFT_U",
          "keystroke": "Shift+U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 57`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards out of a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnTopLink: function(testPageDocument){
			// sets focus on the 'Top' link
			testPageDocument.getElementById('top').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards out of a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "UP" ], [ "SHIFT_U" ] ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_K" ],
        [ "SHIFT_U" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnTopLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 58`] = `
"{
  "task": "navigate backwards out of a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 59`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-11-navigate-backwards-out-of-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-navigate-backwards-out-of-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 60`] = `
"{
  "info": {
    "testId": 11,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 61`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-11-navigate-backwards-out-of-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-navigate-backwards-out-of-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 62`] = `
"{
  "info": {
    "testId": 11,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 63`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards out of a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnTopLink: function(testPageDocument){
			// sets focus on the 'Top' link
			testPageDocument.getElementById('top').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "UP" ], [ "SHIFT_U" ] ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_K" ],
        [ "SHIFT_U" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnTopLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 64`] = `
"{
  "task": "navigate backwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 65`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-12-navigate-backwards-out-of-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-12-navigate-backwards-out-of-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 66`] = `
"{
  "info": {
    "testId": 12,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_LEFT,CTRL_OPT_LEFT",
      "keystroke": "Ctrl+Option+Left, then Ctrl+Option+Left",
      "keypresses": [
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        },
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        }
      ]
    },
    {
      "id": "SHIFT_CTRL_OPT_CMD_L",
      "keystroke": "Shift+Control+Option+Command+L",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_L",
          "keystroke": "Shift+Control+Option+Command+L"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 67`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards out of a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnTopLink: function(testPageDocument){
			// sets focus on the 'Top' link
			testPageDocument.getElementById('top').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "UP" ], [ "SHIFT_U" ] ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_K" ],
        [ "SHIFT_U" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnTopLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 68`] = `
"{
  "task": "navigate backwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 69`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 70`] = `
"{
  "info": {
    "testId": 13,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "B",
      "keystroke": "B",
      "keypresses": [
        {
          "id": "B",
          "keystroke": "B"
        }
      ]
    },
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 71`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 72`] = `
"{
  "info": {
    "testId": 13,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "B",
      "keystroke": "B",
      "keypresses": [
        {
          "id": "B",
          "keystroke": "B"
        }
      ]
    },
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 73`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a button inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
<link rel="help" href="https://w3c.github.io/aria/#aria-expanded">

<script>
  let scripts = {
		setFocusBeforeBannerAndHideTopLink: function(testPageDocument){
			// sets focus on a link before the banner landmark, and hides the first link inside the landmark region
			testPageDocument.getElementById('top').setAttribute('hidden', '');
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ],
      "nvda": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_J" ],
        [ "TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 74`] = `
"{
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 75`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 76`] = `
"{
  "info": {
    "testId": 14,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 77`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 78`] = `
"{
  "info": {
    "testId": 14,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 79`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a button inside a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
<link rel="help" href="https://w3c.github.io/aria/#aria-expanded">

<script>
  let scripts = {
		setFocusBeforeBannerAndHideTopLink: function(testPageDocument){
			// sets focus on a link before the banner landmark, and hides the first link inside the landmark region
			testPageDocument.getElementById('top').setAttribute('hidden', '');
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ],
      "nvda": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_J" ],
        [ "TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 80`] = `
"{
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 81`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-15-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-15-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 82`] = `
"{
  "info": {
    "testId": 15,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT",
      "keystroke": "Control+Option+Right, then Control+Option+Right",
      "keypresses": [
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        },
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        }
      ]
    },
    {
      "id": "CTRL_OPT_CMD_J",
      "keystroke": "Control+Option+Command+J",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_J",
          "keystroke": "Control+Option+Command+J"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 83`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a button inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
<link rel="help" href="https://w3c.github.io/aria/#aria-expanded">

<script>
  let scripts = {
		setFocusBeforeBannerAndHideTopLink: function(testPageDocument){
			// sets focus on a link before the banner landmark, and hides the first link inside the landmark region
			testPageDocument.getElementById('top').setAttribute('hidden', '');
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ],
      "nvda": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_J" ],
        [ "TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 84`] = `
"{
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 85`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 86`] = `
"{
  "info": {
    "testId": 16,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_B",
      "keystroke": "Shift+B",
      "keypresses": [
        {
          "id": "SHIFT_B",
          "keystroke": "Shift+B"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 87`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 88`] = `
"{
  "info": {
    "testId": 16,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_B",
      "keystroke": "Shift+B",
      "keypresses": [
        {
          "id": "SHIFT_B",
          "keystroke": "Shift+B"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 89`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a button inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-describedby">

<script>
  let scripts = {
		setFocusAfterBannerAndHideBottomLink: function(testPageDocument){
			// sets focus on a link after the banner landmark, and hides the last link inside the landmark region
			testPageDocument.getElementById('bottom').setAttribute('hidden', '');
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_J" ],
        [ "SHIFT_TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 90`] = `
"{
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 91`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 92`] = `
"{
  "info": {
    "testId": 17,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 93`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 94`] = `
"{
  "info": {
    "testId": 17,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 95`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a button inside a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-describedby">

<script>
  let scripts = {
		setFocusAfterBannerAndHideBottomLink: function(testPageDocument){
			// sets focus on a link after the banner landmark, and hides the last link inside the landmark region
			testPageDocument.getElementById('bottom').setAttribute('hidden', '');
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_J" ],
        [ "SHIFT_TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 96`] = `
"{
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 97`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-18-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-18-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 98`] = `
"{
  "info": {
    "testId": 18,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_LEFT,CTRL_OPT_LEFT",
      "keystroke": "Ctrl+Option+Left, then Ctrl+Option+Left",
      "keypresses": [
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        },
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        }
      ]
    },
    {
      "id": "SHIFT_CTRL_OPT_CMD_J",
      "keystroke": "Shift+Control+Option+Command+J",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_J",
          "keystroke": "Shift+Control+Option+Command+J"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 99`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a button inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-describedby">

<script>
  let scripts = {
		setFocusAfterBannerAndHideBottomLink: function(testPageDocument){
			// sets focus on a link after the banner landmark, and hides the last link inside the landmark region
			testPageDocument.getElementById('bottom').setAttribute('hidden', '');
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_J" ],
        [ "SHIFT_TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 100`] = `
"{
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 101`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to an image inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 102`] = `
"{
  "info": {
    "testId": 19,
    "task": "navigate forwards to an image inside a banner landmark",
    "title": "Navigate forwards to an image inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "G",
      "keystroke": "G",
      "keypresses": [
        {
          "id": "G",
          "keystroke": "G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 103`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to an image inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 104`] = `
"{
  "info": {
    "testId": 19,
    "task": "navigate forwards to an image inside a banner landmark",
    "title": "Navigate forwards to an image inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "G",
      "keystroke": "G",
      "keypresses": [
        {
          "id": "G",
          "keystroke": "G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 105`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to an image inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to an image inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "G" ] ],
      "nvda": [ [ "G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_G" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 106`] = `
"{
  "task": "navigate forwards to an image inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 107`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to an image inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-20-navigate-forwards-to-an-image-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-20-navigate-forwards-to-an-image-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 108`] = `
"{
  "info": {
    "testId": 20,
    "task": "navigate forwards to an image inside a banner landmark",
    "title": "Navigate forwards to an image inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_CMD_G",
      "keystroke": "Control+Option+Command+G",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_G",
          "keystroke": "Control+Option+Command+G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 109`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to an image inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to an image inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "G" ] ],
      "nvda": [ [ "G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_G" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 110`] = `
"{
  "task": "navigate forwards to an image inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 111`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to an image inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 112`] = `
"{
  "info": {
    "testId": 21,
    "task": "navigate backwards to an image inside a banner landmark",
    "title": "Navigate backwards to an image inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "SHIFT_G",
      "keystroke": "Shift+G",
      "keypresses": [
        {
          "id": "SHIFT_G",
          "keystroke": "Shift+G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 113`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to an image inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 114`] = `
"{
  "info": {
    "testId": 21,
    "task": "navigate backwards to an image inside a banner landmark",
    "title": "Navigate backwards to an image inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "SHIFT_G",
      "keystroke": "Shift+G",
      "keypresses": [
        {
          "id": "SHIFT_G",
          "keystroke": "Shift+G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 115`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to an image inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to an image inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "SHIFT_G" ] ],
      "nvda": [ [ "SHIFT_G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_G" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 116`] = `
"{
  "task": "navigate backwards to an image inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 117`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to an image inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-22-navigate-backwards-to-an-image-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-22-navigate-backwards-to-an-image-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 118`] = `
"{
  "info": {
    "testId": 22,
    "task": "navigate backwards to an image inside a banner landmark",
    "title": "Navigate backwards to an image inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "SHIFT_CTRL_OPT_CMD_G",
      "keystroke": "Shift+Control+Option+Command+G",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_G",
          "keystroke": "Shift+Control+Option+Command+G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 119`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to an image inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to an image inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "SHIFT_G" ] ],
      "nvda": [ [ "SHIFT_G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_G" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 120`] = `
"{
  "task": "navigate backwards to an image inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 121`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a heading inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 122`] = `
"{
  "info": {
    "testId": 23,
    "task": "navigate forwards to a heading inside a banner landmark",
    "title": "Navigate forwards to a heading inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "H",
      "keystroke": "H",
      "keypresses": [
        {
          "id": "H",
          "keystroke": "H"
        }
      ]
    },
    {
      "id": "ONE",
      "keystroke": "1",
      "keypresses": [
        {
          "id": "ONE",
          "keystroke": "1"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 123`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a heading inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 124`] = `
"{
  "info": {
    "testId": 23,
    "task": "navigate forwards to a heading inside a banner landmark",
    "title": "Navigate forwards to a heading inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "H",
      "keystroke": "H",
      "keypresses": [
        {
          "id": "H",
          "keystroke": "H"
        }
      ]
    },
    {
      "id": "ONE",
      "keystroke": "1",
      "keypresses": [
        {
          "id": "ONE",
          "keystroke": "1"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 125`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a heading inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a heading inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [ [ "H" ], [ "ONE" ] ],
      "nvda": [ [ "H" ], [ "ONE" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_H" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 126`] = `
"{
  "task": "navigate forwards to a heading inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 127`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a heading inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-24-navigate-forwards-to-a-heading-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-24-navigate-forwards-to-a-heading-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 128`] = `
"{
  "info": {
    "testId": 24,
    "task": "navigate forwards to a heading inside a banner landmark",
    "title": "Navigate forwards to a heading inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_CMD_H",
      "keystroke": "Control+Option+Command+H",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_H",
          "keystroke": "Control+Option+Command+H"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 129`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a heading inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a heading inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [ [ "H" ], [ "ONE" ] ],
      "nvda": [ [ "H" ], [ "ONE" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_H" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 130`] = `
"{
  "task": "navigate forwards to a heading inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 131`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a heading inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 132`] = `
"{
  "info": {
    "testId": 25,
    "task": "navigate backwards to a heading inside a banner landmark",
    "title": "Navigate backwards to a heading inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "SHIFT_H",
      "keystroke": "Shift+H",
      "keypresses": [
        {
          "id": "SHIFT_H",
          "keystroke": "Shift+H"
        }
      ]
    },
    {
      "id": "SHIFT_ONE",
      "keystroke": "Shift+1",
      "keypresses": [
        {
          "id": "SHIFT_ONE",
          "keystroke": "Shift+1"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 133`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a heading inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 134`] = `
"{
  "info": {
    "testId": 25,
    "task": "navigate backwards to a heading inside a banner landmark",
    "title": "Navigate backwards to a heading inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "SHIFT_H",
      "keystroke": "Shift+H",
      "keypresses": [
        {
          "id": "SHIFT_H",
          "keystroke": "Shift+H"
        }
      ]
    },
    {
      "id": "SHIFT_ONE",
      "keystroke": "Shift+1",
      "keypresses": [
        {
          "id": "SHIFT_ONE",
          "keystroke": "Shift+1"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 135`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a heading inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a heading inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ],
      "nvda": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_H" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 136`] = `
"{
  "task": "navigate backwards to a heading inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 137`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a heading inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-26-navigate-backwards-to-a-heading-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-26-navigate-backwards-to-a-heading-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 138`] = `
"{
  "info": {
    "testId": 26,
    "task": "navigate backwards to a heading inside a banner landmark",
    "title": "Navigate backwards to a heading inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "SHIFT_CTRL_OPT_CMD_H",
      "keystroke": "Shift+Control+Option+Command+H",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_H",
          "keystroke": "Shift+Control+Option+Command+H"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`V1 test format version runs createAllTests successfully (banner) 139`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a heading inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a heading inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ],
      "nvda": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_H" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`V1 test format version runs createAllTests successfully (banner) 140`] = `
"{
  "task": "navigate backwards to a heading inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 1`] = `
"{
  "triggerAlert": {
    "virtualCursor": {
      "jaws": [
        [ "space|1" ],
        [ "enter|1.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "space|2" ],
        [
          "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space|2.1"
        ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "space|1" ],
        [ "enter|1.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "space|2" ],
        [ "enter|2.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+space|3" ],
        [ "space|3.1" ],
        [ "enter|3.2" ]
      ]
    }
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 2`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <title>Index of Assistive Technology Test Files</title>
  <style>
    table {
      display: table;
      border-collapse: collapse;
      border-spacing: 2px;
      border-color: rgb(128,128,128);
    }

    thead {
      display: table-row-group;
      vertical-align: middle;
      border-bottom: black solid 2px;
    }

    tbody {
      display: table-row-group;
      vertical-align: middle;
      border-color: rgb(128,128,128);
    }

    tr:nth-child(even) {background: #DDD}
    tr:nth-child(odd) {background: #FFF}

    tr {
      display: table-row;
      vertical-align: inherit;
      border-color: rgb(128,128,128);
    }

    td {
      padding: 3px;
      display: table-cell;
    }

    td.test {
      text-align: center;
    }

    td.none {
      color: #333;
    }

    th {
      padding: 3px;
      font-weight: bold;
      display: table-cell;
    }
  </style>
</head>
<body>
 <main>
  <h1>Index of Assistive Technology Test Files</h1>
  <p>This is useful for viewing the local files on a local web server.</p>
  <table>
    <thead>
      <tr>
        <th>Sequence</th>
        <th>Task ID</th>
        <th>Testing Task</th>
        <th>JAWS</th>
<th>NVDA</th>
<th>VoiceOver for macOS</th>

        <th>Setup Script Reference</th>
      </tr>
    </thead>
    <tbody>
<tr><td>1</td><td>triggerAlert</td><td scope="row">Trigger an alert</td><td class="test"><a href="test-03-triggerAlert.html?at=jaws" aria-label="JAWS test for task triggerAlert">JAWS</a></td><td class="test"><a href="test-03-triggerAlert.html?at=nvda" aria-label="NVDA test for task triggerAlert">NVDA</a></td><td class="test"><a href="test-03-triggerAlert.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task triggerAlert">VoiceOver for macOS</a></td><td>setFocusOnButton</td></tr>

    </tbody>
  </table>
  </main>
</body>
"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 3`] = `
"window[document.currentScript.getAttribute("jsonpFunction") || "scriptsJsonpLoaded"]({
  setFocusOnButton(testPageDocument) {
    // sets focus on the 'Trigger Alert' button
    testPageDocument.querySelector('#alert-trigger').focus();
  }
});
"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 4`] = `
"export function setFocusOnButton(testPageDocument) {
  // sets focus on the 'Trigger Alert' button
  testPageDocument.querySelector('#alert-trigger').focus();
}
"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 5`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Trigger an alert</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/">
    <link rel="preload" href="test-03-triggerAlert-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-03-triggerAlert-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 6`] = `
"{
  "info": {
    "testId": "triggerAlert",
    "title": "Trigger an alert",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/",
        "linkText": "APG Example: Alert"
      }
    ],
    "presentationNumber": 3
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_144013/alert.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the 'Trigger Alert' button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the 'Trigger Alert' button\\ntestPageDocument.querySelector('#alert-trigger').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 1,
      "settings": "virtualCursor"
    },
    {
      "id": "enter",
      "keypresses": [
        {
          "id": "enter",
          "keystroke": "Enter"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Enter",
      "presentationNumber": 1.1,
      "settings": "virtualCursor"
    },
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 2,
      "settings": "pcCursor"
    },
    {
      "id": "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space",
      "keypresses": [
        {
          "id": "jaws",
          "keystroke": "Insert"
        },
        {
          "id": "nvda",
          "keystroke": "Insert"
        },
        {
          "id": "vo",
          "keystroke": "Control+Option"
        },
        {
          "id": "del",
          "keystroke": "Delete"
        },
        {
          "id": "delete",
          "keystroke": "Delete"
        },
        {
          "id": "esc",
          "keystroke": "Escape"
        },
        {
          "id": "escape",
          "keystroke": "Escape"
        },
        {
          "id": "jaws+space",
          "keystroke": "Insert+Space"
        },
        {
          "id": "nvda+space",
          "keystroke": "Insert+Space"
        },
        {
          "id": "vo+space",
          "keystroke": "Control+Option+Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert then Insert then Control+Option then Delete then Delete then Escape then Escape then Insert+Space then Insert+Space then Control+Option+Space",
      "presentationNumber": 2.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 7`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Trigger an alert</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/">
    <link rel="preload" href="test-03-triggerAlert-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-03-triggerAlert-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 8`] = `
"{
  "info": {
    "testId": "triggerAlert",
    "title": "Trigger an alert",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/",
        "linkText": "APG Example: Alert"
      }
    ],
    "presentationNumber": 3
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_144013/alert.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the 'Trigger Alert' button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the 'Trigger Alert' button\\ntestPageDocument.querySelector('#alert-trigger').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 1,
      "settings": "browseMode"
    },
    {
      "id": "enter",
      "keypresses": [
        {
          "id": "enter",
          "keystroke": "Enter"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Enter",
      "presentationNumber": 1.1,
      "settings": "browseMode"
    },
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 2,
      "settings": "focusMode"
    },
    {
      "id": "enter",
      "keypresses": [
        {
          "id": "enter",
          "keystroke": "Enter"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Enter",
      "presentationNumber": 2.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 9`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Trigger an alert</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/">
    <link rel="preload" href="test-03-triggerAlert-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-03-triggerAlert-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 10`] = `
"{
  "info": {
    "testId": "triggerAlert",
    "title": "Trigger an alert",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/",
        "linkText": "APG Example: Alert"
      }
    ],
    "presentationNumber": 3
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_144013/alert.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the 'Trigger Alert' button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the 'Trigger Alert' button\\ntestPageDocument.querySelector('#alert-trigger').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+space",
      "keypresses": [
        {
          "id": "ctrl+opt+space",
          "keystroke": "Control+Option+Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Space",
      "presentationNumber": 3,
      "settings": "defaultMode"
    },
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 3.1,
      "settings": "defaultMode"
    },
    {
      "id": "enter",
      "keypresses": [
        {
          "id": "enter",
          "keystroke": "Enter"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Enter",
      "presentationNumber": 3.2,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (alert) 11`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Trigger an alert</title>

<script>
  let scripts = {
		setFocusOnButton: function(testPageDocument){
			// sets focus on the 'Trigger Alert' button
			testPageDocument.querySelector('#alert-trigger').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "triggerAlert",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Trigger Alert' button",
  "specific_user_instruction": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
  "setupTestPage": "setFocusOnButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "pcCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space",
        "settings": "pcCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "focusMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "focusMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "triggerAlert",
        "command": "ctrl+opt+space",
        "settings": "defaultMode",
        "presentationNumber": 3,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "defaultMode",
        "presentationNumber": 3.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "defaultMode",
        "presentationNumber": 3.2,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "triggerAlert": {
    "virtualCursor": {
      "jaws": [
        [ "space|1" ],
        [ "enter|1.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "space|2" ],
        [
          "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space|2.1"
        ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "space|1" ],
        [ "enter|1.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "space|2" ],
        [ "enter|2.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+space|3" ],
        [ "space|3.1" ],
        [ "enter|3.2" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-8_144013/alert.setFocusOnButton.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (alert) 12`] = `
"{
  "task": "triggerAlert",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Trigger Alert' button",
  "specific_user_instruction": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
  "setupTestPage": "setFocusOnButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "pcCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space",
        "settings": "pcCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "focusMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "focusMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "triggerAlert",
        "command": "ctrl+opt+space",
        "settings": "defaultMode",
        "presentationNumber": 3,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "defaultMode",
        "presentationNumber": 3.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "defaultMode",
        "presentationNumber": 3.2,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 1`] = `
"{
  "navForwardsToButton": {
    "virtualCursor": {
      "jaws": [
        [ "down|1" ],
        [ "b|1.1" ],
        [ "f|1.2" ],
        [ "tab|1.3" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "tab|3" ] ] },
    "browseMode": {
      "nvda": [
        [ "down|1" ],
        [ "b|1.1" ],
        [ "f|1.2" ],
        [ "tab|1.3" ]
      ]
    },
    "focusMode": { "nvda": [ [ "tab|3" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+right|5" ],
        [ "tab|5.1" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "j|5.2" ], [ "b|5.3" ] ]
    }
  },
  "navBackToButton": {
    "virtualCursor": {
      "jaws": [
        [ "up|2" ],
        [ "shift+b|2.1" ],
        [ "shift+f|2.2" ],
        [ "shift+tab|2.3" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "shift+tab|4" ] ] },
    "browseMode": {
      "nvda": [
        [ "up|2" ],
        [ "shift+b|2.1" ],
        [ "shift+f|2.2" ],
        [ "shift+tab|2.3" ]
      ]
    },
    "focusMode": { "nvda": [ [ "shift+tab|4" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+left|6" ],
        [ "shift+tab|6.1" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [
        [ "shift+j|6.2" ],
        [ "shift+b|6.3" ]
      ]
    }
  },
  "reqInfoAboutButton": {
    "virtualCursor": {
      "jaws": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+f3|9" ],
        [ "ctrl+opt+f4|9.1" ]
      ]
    }
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 2`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <title>Index of Assistive Technology Test Files</title>
  <style>
    table {
      display: table;
      border-collapse: collapse;
      border-spacing: 2px;
      border-color: rgb(128,128,128);
    }

    thead {
      display: table-row-group;
      vertical-align: middle;
      border-bottom: black solid 2px;
    }

    tbody {
      display: table-row-group;
      vertical-align: middle;
      border-color: rgb(128,128,128);
    }

    tr:nth-child(even) {background: #DDD}
    tr:nth-child(odd) {background: #FFF}

    tr {
      display: table-row;
      vertical-align: inherit;
      border-color: rgb(128,128,128);
    }

    td {
      padding: 3px;
      display: table-cell;
    }

    td.test {
      text-align: center;
    }

    td.none {
      color: #333;
    }

    th {
      padding: 3px;
      font-weight: bold;
      display: table-cell;
    }
  </style>
</head>
<body>
 <main>
  <h1>Index of Assistive Technology Test Files</h1>
  <p>This is useful for viewing the local files on a local web server.</p>
  <table>
    <thead>
      <tr>
        <th>Sequence</th>
        <th>Task ID</th>
        <th>Testing Task</th>
        <th>JAWS</th>
<th>NVDA</th>
<th>VoiceOver for macOS</th>

        <th>Setup Script Reference</th>
      </tr>
    </thead>
    <tbody>
<tr><td>1</td><td>navForwardsToButton</td><td scope="row">Navigate forwards to a button</td><td class="test"><a href="test-05-navForwardsToButton.html?at=jaws" aria-label="JAWS test for task navForwardsToButton">JAWS</a></td><td class="test"><a href="test-05-navForwardsToButton.html?at=nvda" aria-label="NVDA test for task navForwardsToButton">NVDA</a></td><td class="test"><a href="test-05-navForwardsToButton.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task navForwardsToButton">VoiceOver for macOS</a></td><td>setFocusBeforeButton</td></tr>
<tr><td>2</td><td>navBackToButton</td><td scope="row">Navigate backwards to a button</td><td class="test"><a href="test-06-navBackToButton.html?at=jaws" aria-label="JAWS test for task navBackToButton">JAWS</a></td><td class="test"><a href="test-06-navBackToButton.html?at=nvda" aria-label="NVDA test for task navBackToButton">NVDA</a></td><td class="test"><a href="test-06-navBackToButton.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task navBackToButton">VoiceOver for macOS</a></td><td>setFocusAfterButton</td></tr>
<tr><td>3</td><td>reqInfoAboutButton</td><td scope="row">Request information about a button</td><td class="test"><a href="test-09-reqInfoAboutButton.html?at=jaws" aria-label="JAWS test for task reqInfoAboutButton">JAWS</a></td><td class="test"><a href="test-09-reqInfoAboutButton.html?at=nvda" aria-label="NVDA test for task reqInfoAboutButton">NVDA</a></td><td class="test"><a href="test-09-reqInfoAboutButton.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task reqInfoAboutButton">VoiceOver for macOS</a></td><td>setFocusOnButton</td></tr>

    </tbody>
  </table>
  </main>
</body>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 3`] = `
"window[document.currentScript.getAttribute("jsonpFunction") || "scriptsJsonpLoaded"]({
  setFocusAfterButton(testPageDocument) {
    // sets focus on a link after the button
    testPageDocument.querySelector('#afterlink').focus();
  },
  setFocusBeforeButton(testPageDocument) {
    // sets focus on a link before the button
    testPageDocument.querySelector('#beforelink').focus();
  },
  setFocusOnButton(testPageDocument) {
    // sets focus on the button
    testPageDocument.querySelector('#action').focus();
  }
});
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 4`] = `
"export function setFocusAfterButton(testPageDocument) {
  // sets focus on a link after the button
  testPageDocument.querySelector('#afterlink').focus();
}

export function setFocusBeforeButton(testPageDocument) {
  // sets focus on a link before the button
  testPageDocument.querySelector('#beforelink').focus();
}

export function setFocusOnButton(testPageDocument) {
  // sets focus on the button
  testPageDocument.querySelector('#action').focus();
}
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 5`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-05-navForwardsToButton-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToButton-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 6`] = `
"{
  "info": {
    "testId": "navForwardsToButton",
    "title": "Navigate forwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusBeforeButton.html",
    "setupScript": {
      "script": "setFocusBeforeButton",
      "scriptDescription": "sets focus on a link before the button",
      "name": "setFocusBeforeButton",
      "source": "// sets focus on a link before the button\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeButton.module.js",
      "jsonpPath": "scripts/setFocusBeforeButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 1,
      "settings": "virtualCursor"
    },
    {
      "id": "b",
      "keypresses": [
        {
          "id": "b",
          "keystroke": "b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "b",
      "presentationNumber": 1.1,
      "settings": "virtualCursor"
    },
    {
      "id": "f",
      "keypresses": [
        {
          "id": "f",
          "keystroke": "f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "f",
      "presentationNumber": 1.2,
      "settings": "virtualCursor"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 1.3,
      "settings": "virtualCursor"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 3,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 7`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-05-navForwardsToButton-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToButton-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 8`] = `
"{
  "info": {
    "testId": "navForwardsToButton",
    "title": "Navigate forwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusBeforeButton.html",
    "setupScript": {
      "script": "setFocusBeforeButton",
      "scriptDescription": "sets focus on a link before the button",
      "name": "setFocusBeforeButton",
      "source": "// sets focus on a link before the button\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeButton.module.js",
      "jsonpPath": "scripts/setFocusBeforeButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 1,
      "settings": "browseMode"
    },
    {
      "id": "b",
      "keypresses": [
        {
          "id": "b",
          "keystroke": "b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "b",
      "presentationNumber": 1.1,
      "settings": "browseMode"
    },
    {
      "id": "f",
      "keypresses": [
        {
          "id": "f",
          "keystroke": "f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "f",
      "presentationNumber": 1.2,
      "settings": "browseMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 1.3,
      "settings": "browseMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 3,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 9`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-05-navForwardsToButton-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToButton-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 10`] = `
"{
  "info": {
    "testId": "navForwardsToButton",
    "title": "Navigate forwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode_singleQuickKeyNavOn",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusBeforeButton.html",
    "setupScript": {
      "script": "setFocusBeforeButton",
      "scriptDescription": "sets focus on a link before the button",
      "name": "setFocusBeforeButton",
      "source": "// sets focus on a link before the button\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeButton.module.js",
      "jsonpPath": "scripts/setFocusBeforeButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ],
      "singleQuickKeyNavOn": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
        "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+right",
      "keypresses": [
        {
          "id": "ctrl+opt+right",
          "keystroke": "Control+Option+Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Right Arrow",
      "presentationNumber": 5,
      "settings": "defaultMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 5.1,
      "settings": "defaultMode"
    },
    {
      "id": "j",
      "keypresses": [
        {
          "id": "j",
          "keystroke": "j"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "j",
      "presentationNumber": 5.2,
      "settings": "singleQuickKeyNavOn"
    },
    {
      "id": "b",
      "keypresses": [
        {
          "id": "b",
          "keystroke": "b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "b",
      "presentationNumber": 5.3,
      "settings": "singleQuickKeyNavOn"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 11`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a button</title>

<script>
  let scripts = {
		setFocusBeforeButton: function(testPageDocument){
			// sets focus on a link before the button
			testPageDocument.querySelector('#beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "navForwardsToButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the button",
  "specific_user_instruction": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
  "setupTestPage": "setFocusBeforeButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navForwardsToButton",
        "command": "down",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "f",
        "settings": "virtualCursor",
        "presentationNumber": 1.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "virtualCursor",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "pcCursor",
        "presentationNumber": 3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navForwardsToButton",
        "command": "down",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "f",
        "settings": "browseMode",
        "presentationNumber": 1.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "browseMode",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "focusMode",
        "presentationNumber": 3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navForwardsToButton",
        "command": "ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 5,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "defaultMode",
        "presentationNumber": 5.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "j ",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.3,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "navForwardsToButton": {
    "virtualCursor": {
      "jaws": [
        [ "down|1" ],
        [ "b|1.1" ],
        [ "f|1.2" ],
        [ "tab|1.3" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "tab|3" ] ] },
    "browseMode": {
      "nvda": [
        [ "down|1" ],
        [ "b|1.1" ],
        [ "f|1.2" ],
        [ "tab|1.3" ]
      ]
    },
    "focusMode": { "nvda": [ [ "tab|3" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+right|5" ],
        [ "tab|5.1" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "j|5.2" ], [ "b|5.3" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-8_124112/button.setFocusBeforeButton.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 12`] = `
"{
  "task": "navForwardsToButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the button",
  "specific_user_instruction": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
  "setupTestPage": "setFocusBeforeButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navForwardsToButton",
        "command": "down",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "f",
        "settings": "virtualCursor",
        "presentationNumber": 1.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "virtualCursor",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "pcCursor",
        "presentationNumber": 3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navForwardsToButton",
        "command": "down",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "f",
        "settings": "browseMode",
        "presentationNumber": 1.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "browseMode",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "focusMode",
        "presentationNumber": 3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navForwardsToButton",
        "command": "ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 5,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "defaultMode",
        "presentationNumber": 5.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "j ",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.3,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 13`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-06-navBackToButton-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToButton-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 14`] = `
"{
  "info": {
    "testId": "navBackToButton",
    "title": "Navigate backwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusAfterButton.html",
    "setupScript": {
      "script": "setFocusAfterButton",
      "scriptDescription": "sets focus on a link after the button",
      "name": "setFocusAfterButton",
      "source": "// sets focus on a link after the button\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterButton.module.js",
      "jsonpPath": "scripts/setFocusAfterButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 2,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+b",
      "keypresses": [
        {
          "id": "shift+b",
          "keystroke": "Shift+b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+b",
      "presentationNumber": 2.1,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+f",
      "keypresses": [
        {
          "id": "shift+f",
          "keystroke": "Shift+f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+f",
      "presentationNumber": 2.2,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.3,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 4,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 15`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-06-navBackToButton-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToButton-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 16`] = `
"{
  "info": {
    "testId": "navBackToButton",
    "title": "Navigate backwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusAfterButton.html",
    "setupScript": {
      "script": "setFocusAfterButton",
      "scriptDescription": "sets focus on a link after the button",
      "name": "setFocusAfterButton",
      "source": "// sets focus on a link after the button\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterButton.module.js",
      "jsonpPath": "scripts/setFocusAfterButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 2,
      "settings": "browseMode"
    },
    {
      "id": "shift+b",
      "keypresses": [
        {
          "id": "shift+b",
          "keystroke": "Shift+b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+b",
      "presentationNumber": 2.1,
      "settings": "browseMode"
    },
    {
      "id": "shift+f",
      "keypresses": [
        {
          "id": "shift+f",
          "keystroke": "Shift+f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+f",
      "presentationNumber": 2.2,
      "settings": "browseMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.3,
      "settings": "browseMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 4,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 17`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-06-navBackToButton-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToButton-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 18`] = `
"{
  "info": {
    "testId": "navBackToButton",
    "title": "Navigate backwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode_singleQuickKeyNavOn",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusAfterButton.html",
    "setupScript": {
      "script": "setFocusAfterButton",
      "scriptDescription": "sets focus on a link after the button",
      "name": "setFocusAfterButton",
      "source": "// sets focus on a link after the button\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterButton.module.js",
      "jsonpPath": "scripts/setFocusAfterButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ],
      "singleQuickKeyNavOn": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
        "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+left",
      "keypresses": [
        {
          "id": "ctrl+opt+left",
          "keystroke": "Control+Option+Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Left Arrow",
      "presentationNumber": 6,
      "settings": "defaultMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 6.1,
      "settings": "defaultMode"
    },
    {
      "id": "shift+j",
      "keypresses": [
        {
          "id": "shift+j",
          "keystroke": "Shift+j"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+j",
      "presentationNumber": 6.2,
      "settings": "singleQuickKeyNavOn"
    },
    {
      "id": "shift+b",
      "keypresses": [
        {
          "id": "shift+b",
          "keystroke": "Shift+b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+b",
      "presentationNumber": 6.3,
      "settings": "singleQuickKeyNavOn"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 19`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a button</title>

<script>
  let scripts = {
		setFocusAfterButton: function(testPageDocument){
			// sets focus on a link after the button
			testPageDocument.querySelector('#afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "navBackToButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the button",
  "specific_user_instruction": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
  "setupTestPage": "setFocusAfterButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navBackToButton",
        "command": "up",
        "settings": "virtualCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "virtualCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+f",
        "settings": "virtualCursor",
        "presentationNumber": 2.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "virtualCursor",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "pcCursor",
        "presentationNumber": 4,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navBackToButton",
        "command": "up",
        "settings": "browseMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "browseMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+f",
        "settings": "browseMode",
        "presentationNumber": 2.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "browseMode",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "focusMode",
        "presentationNumber": 4,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navBackToButton",
        "command": "ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 6,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "defaultMode",
        "presentationNumber": 6.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.3,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "navBackToButton": {
    "virtualCursor": {
      "jaws": [
        [ "up|2" ],
        [ "shift+b|2.1" ],
        [ "shift+f|2.2" ],
        [ "shift+tab|2.3" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "shift+tab|4" ] ] },
    "browseMode": {
      "nvda": [
        [ "up|2" ],
        [ "shift+b|2.1" ],
        [ "shift+f|2.2" ],
        [ "shift+tab|2.3" ]
      ]
    },
    "focusMode": { "nvda": [ [ "shift+tab|4" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+left|6" ],
        [ "shift+tab|6.1" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [
        [ "shift+j|6.2" ],
        [ "shift+b|6.3" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-8_124112/button.setFocusAfterButton.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 20`] = `
"{
  "task": "navBackToButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the button",
  "specific_user_instruction": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
  "setupTestPage": "setFocusAfterButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navBackToButton",
        "command": "up",
        "settings": "virtualCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "virtualCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+f",
        "settings": "virtualCursor",
        "presentationNumber": 2.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "virtualCursor",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "pcCursor",
        "presentationNumber": 4,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navBackToButton",
        "command": "up",
        "settings": "browseMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "browseMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+f",
        "settings": "browseMode",
        "presentationNumber": 2.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "browseMode",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "focusMode",
        "presentationNumber": 4,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navBackToButton",
        "command": "ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 6,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "defaultMode",
        "presentationNumber": 6.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.3,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 21`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-09-reqInfoAboutButton-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutButton-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 22`] = `
"{
  "info": {
    "testId": "reqInfoAboutButton",
    "title": "Request information about a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the button\\ntestPageDocument.querySelector('#action').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Print Page' button, read information about the button.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 7,
      "settings": "virtualCursor"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 7.1,
      "settings": "virtualCursor"
    },
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 8,
      "settings": "pcCursor"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 8.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 23`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-09-reqInfoAboutButton-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutButton-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 24`] = `
"{
  "info": {
    "testId": "reqInfoAboutButton",
    "title": "Request information about a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the button\\ntestPageDocument.querySelector('#action').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Print Page' button, read information about the button.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 7,
      "settings": "browseMode"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 7.1,
      "settings": "browseMode"
    },
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 8,
      "settings": "focusMode"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 8.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 25`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-09-reqInfoAboutButton-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutButton-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 26`] = `
"{
  "info": {
    "testId": "reqInfoAboutButton",
    "title": "Request information about a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the button\\ntestPageDocument.querySelector('#action').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Print Page' button, read information about the button.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+f3",
      "keypresses": [
        {
          "id": "ctrl+opt+f3",
          "keystroke": "Control+Option+F3"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+F3",
      "presentationNumber": 9,
      "settings": "defaultMode"
    },
    {
      "id": "ctrl+opt+f4",
      "keypresses": [
        {
          "id": "ctrl+opt+f4",
          "keystroke": "Control+Option+F4"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+F4",
      "presentationNumber": 9.1,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 27`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Request information about a button</title>

<script>
  let scripts = {
		setFocusOnButton: function(testPageDocument){
			// sets focus on the button
			testPageDocument.querySelector('#action').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "reqInfoAboutButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the button",
  "specific_user_instruction": "Starting at the 'Print Page' button, read information about the button.",
  "setupTestPage": "setFocusOnButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "virtualCursor",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "virtualCursor",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "pcCursor",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "pcCursor",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "browseMode",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "browseMode",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "focusMode",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "focusMode",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ctrl+opt+f3",
        "settings": "defaultMode",
        "presentationNumber": 9,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ctrl+opt+f4",
        "settings": "defaultMode",
        "presentationNumber": 9.1,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "reqInfoAboutButton": {
    "virtualCursor": {
      "jaws": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+f3|9" ],
        [ "ctrl+opt+f4|9.1" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-8_124112/button.setFocusOnButton.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (command-button) 28`] = `
"{
  "task": "reqInfoAboutButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the button",
  "specific_user_instruction": "Starting at the 'Print Page' button, read information about the button.",
  "setupTestPage": "setFocusOnButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "virtualCursor",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "virtualCursor",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "pcCursor",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "pcCursor",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "browseMode",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "browseMode",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "focusMode",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "focusMode",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ctrl+opt+f3",
        "settings": "defaultMode",
        "presentationNumber": 9,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ctrl+opt+f4",
        "settings": "defaultMode",
        "presentationNumber": 9.1,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 1`] = `
"{
  "navForwardsToSlider": {
    "virtualCursor": {
      "jaws": [
        [ "down down|1" ],
        [ "f|1.1" ],
        [ "tab|1.2" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "tab|1.3" ] ] },
    "browseMode": {
      "nvda": [
        [ "down down|1" ],
        [ "f|1.1" ],
        [ "tab|1.2" ]
      ]
    },
    "focusMode": { "nvda": [ [ "tab|1.3" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+right ctrl+opt+right|5"
        ],
        [ "tab|5.2" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "j|5.1" ] ]
    }
  },
  "navBackToSlider": {
    "virtualCursor": {
      "jaws": [
        [ "up|2" ],
        [ "shift+f|2.1" ],
        [ "shift+tab|2.2" ]
      ]
    },
    "pcCursor": {
      "jaws": [ [ "shift+tab|2.3" ] ]
    },
    "browseMode": {
      "nvda": [
        [ "up|2" ],
        [ "shift+f|2.1" ],
        [ "shift+tab|2.2" ]
      ]
    },
    "focusMode": {
      "nvda": [ [ "shift+tab|2.3" ] ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+left ctrl+opt+left|6"
        ],
        [ "shift+tab|6.2" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "shift+j|6.1" ] ]
    }
  },
  "reqInfoAboutSlider": {
    "virtualCursor": {
      "jaws": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+f3|9" ],
        [ "ctrl+opt+f4|9.1" ]
      ]
    }
  },
  "incrementSliderByOneStep": {
    "pcCursor": {
      "jaws": [
        [ "right|10" ],
        [ "up|10.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "right|10" ],
        [ "up|10.1" ]
      ]
    },
    "quickNavOff": {
      "voiceover_macos": [
        [ "right|11" ],
        [ "up|11.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+shift+down ctrl+opt+up|11.2"
        ],
        [
          "ctrl+opt+shift+down ctrl+opt+right|11.3"
        ]
      ]
    }
  },
  "decrementSliderByOneStep": {
    "pcCursor": {
      "jaws": [
        [ "left|12" ],
        [ "down|12.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "left|12" ],
        [ "down|12.1" ]
      ]
    },
    "quickNavOff": {
      "voiceover_macos": [
        [ "left|13" ],
        [ "down|13.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+shift+down ctrl+opt+down|13.2"
        ],
        [
          "ctrl+opt+shift+down ctrl+opt+left|13.3"
        ]
      ]
    }
  },
  "incrementSliderByTenSteps": {
    "pcCursor": { "jaws": [ [ "pageUp|14" ] ] },
    "focusMode": { "nvda": [ [ "pageUp|14" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "pageUp|15" ] ]
    }
  },
  "decrementSliderByTenSteps": {
    "pcCursor": { "jaws": [ [ "pageDown|16" ] ] },
    "focusMode": { "nvda": [ [ "pageDown|16" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "pageDown|17" ] ]
    }
  },
  "decrementSliderToMinimumValue": {
    "pcCursor": { "jaws": [ [ "home|18" ] ] },
    "focusMode": { "nvda": [ [ "home|18" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "home|19" ] ]
    }
  },
  "incrementSliderToMaximumValue": {
    "pcCursor": { "jaws": [ [ "end|20" ] ] },
    "focusMode": { "nvda": [ [ "end|20" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "end|21" ] ]
    }
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 2`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <title>Index of Assistive Technology Test Files</title>
  <style>
    table {
      display: table;
      border-collapse: collapse;
      border-spacing: 2px;
      border-color: rgb(128,128,128);
    }

    thead {
      display: table-row-group;
      vertical-align: middle;
      border-bottom: black solid 2px;
    }

    tbody {
      display: table-row-group;
      vertical-align: middle;
      border-color: rgb(128,128,128);
    }

    tr:nth-child(even) {background: #DDD}
    tr:nth-child(odd) {background: #FFF}

    tr {
      display: table-row;
      vertical-align: inherit;
      border-color: rgb(128,128,128);
    }

    td {
      padding: 3px;
      display: table-cell;
    }

    td.test {
      text-align: center;
    }

    td.none {
      color: #333;
    }

    th {
      padding: 3px;
      font-weight: bold;
      display: table-cell;
    }
  </style>
</head>
<body>
 <main>
  <h1>Index of Assistive Technology Test Files</h1>
  <p>This is useful for viewing the local files on a local web server.</p>
  <table>
    <thead>
      <tr>
        <th>Sequence</th>
        <th>Task ID</th>
        <th>Testing Task</th>
        <th>JAWS</th>
<th>NVDA</th>
<th>VoiceOver for macOS</th>

        <th>Setup Script Reference</th>
      </tr>
    </thead>
    <tbody>
<tr><td>1</td><td>navForwardsToSlider</td><td scope="row">Navigate forwards to a slider</td><td class="test"><a href="test-05-navForwardsToSlider.html?at=jaws" aria-label="JAWS test for task navForwardsToSlider">JAWS</a></td><td class="test"><a href="test-05-navForwardsToSlider.html?at=nvda" aria-label="NVDA test for task navForwardsToSlider">NVDA</a></td><td class="test"><a href="test-05-navForwardsToSlider.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task navForwardsToSlider">VoiceOver for macOS</a></td><td>setFocusBeforeRedSlider</td></tr>
<tr><td>2</td><td>navBackToSlider</td><td scope="row">Navigate backwards to a slider</td><td class="test"><a href="test-06-navBackToSlider.html?at=jaws" aria-label="JAWS test for task navBackToSlider">JAWS</a></td><td class="test"><a href="test-06-navBackToSlider.html?at=nvda" aria-label="NVDA test for task navBackToSlider">NVDA</a></td><td class="test"><a href="test-06-navBackToSlider.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task navBackToSlider">VoiceOver for macOS</a></td><td>setFocusAfterRedSlider</td></tr>
<tr><td>3</td><td>reqInfoAboutSlider</td><td scope="row">Request information about a slider</td><td class="test"><a href="test-09-reqInfoAboutSlider.html?at=jaws" aria-label="JAWS test for task reqInfoAboutSlider">JAWS</a></td><td class="test"><a href="test-09-reqInfoAboutSlider.html?at=nvda" aria-label="NVDA test for task reqInfoAboutSlider">NVDA</a></td><td class="test"><a href="test-09-reqInfoAboutSlider.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task reqInfoAboutSlider">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>4</td><td>incrementSliderByOneStep</td><td scope="row">Increment a slider by one step</td><td class="test"><a href="test-11-incrementSliderByOneStep.html?at=jaws" aria-label="JAWS test for task incrementSliderByOneStep">JAWS</a></td><td class="test"><a href="test-11-incrementSliderByOneStep.html?at=nvda" aria-label="NVDA test for task incrementSliderByOneStep">NVDA</a></td><td class="test"><a href="test-11-incrementSliderByOneStep.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task incrementSliderByOneStep">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>5</td><td>decrementSliderByOneStep</td><td scope="row">Decrement a slider by one step</td><td class="test"><a href="test-13-decrementSliderByOneStep.html?at=jaws" aria-label="JAWS test for task decrementSliderByOneStep">JAWS</a></td><td class="test"><a href="test-13-decrementSliderByOneStep.html?at=nvda" aria-label="NVDA test for task decrementSliderByOneStep">NVDA</a></td><td class="test"><a href="test-13-decrementSliderByOneStep.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task decrementSliderByOneStep">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>6</td><td>incrementSliderByTenSteps</td><td scope="row">Increment a slider by ten steps</td><td class="test"><a href="test-15-incrementSliderByTenSteps.html?at=jaws" aria-label="JAWS test for task incrementSliderByTenSteps">JAWS</a></td><td class="test"><a href="test-15-incrementSliderByTenSteps.html?at=nvda" aria-label="NVDA test for task incrementSliderByTenSteps">NVDA</a></td><td class="test"><a href="test-15-incrementSliderByTenSteps.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task incrementSliderByTenSteps">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>7</td><td>decrementSliderByTenSteps</td><td scope="row">Decrement a slider by ten steps</td><td class="test"><a href="test-17-decrementSliderByTenSteps.html?at=jaws" aria-label="JAWS test for task decrementSliderByTenSteps">JAWS</a></td><td class="test"><a href="test-17-decrementSliderByTenSteps.html?at=nvda" aria-label="NVDA test for task decrementSliderByTenSteps">NVDA</a></td><td class="test"><a href="test-17-decrementSliderByTenSteps.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task decrementSliderByTenSteps">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>8</td><td>decrementSliderToMinimumValue</td><td scope="row">Decrement a slider to the minimum value</td><td class="test"><a href="test-19-decrementSliderToMinimumValue.html?at=jaws" aria-label="JAWS test for task decrementSliderToMinimumValue">JAWS</a></td><td class="test"><a href="test-19-decrementSliderToMinimumValue.html?at=nvda" aria-label="NVDA test for task decrementSliderToMinimumValue">NVDA</a></td><td class="test"><a href="test-19-decrementSliderToMinimumValue.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task decrementSliderToMinimumValue">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>9</td><td>incrementSliderToMaximumValue</td><td scope="row">Increment a slider to the maximum value</td><td class="test"><a href="test-21-incrementSliderToMaximumValue.html?at=jaws" aria-label="JAWS test for task incrementSliderToMaximumValue">JAWS</a></td><td class="test"><a href="test-21-incrementSliderToMaximumValue.html?at=nvda" aria-label="NVDA test for task incrementSliderToMaximumValue">NVDA</a></td><td class="test"><a href="test-21-incrementSliderToMaximumValue.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task incrementSliderToMaximumValue">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>

    </tbody>
  </table>
  </main>
</body>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 3`] = `
"window[document.currentScript.getAttribute("jsonpFunction") || "scriptsJsonpLoaded"]({
  setFocusAfterRedSlider(testPageDocument) {
    // sets focus on a link after the Red slider
    testPageDocument.querySelector('#afterlink').focus();
  },
  setFocusBeforeRedSlider(testPageDocument) {
    // sets focus on a link before the Red slider
    testPageDocument.querySelector('#beforelink').focus();
  },
  setFocusOnRedSlider(testPageDocument) {
    // sets focus on the 'Red' slider
    testPageDocument.querySelector('[role="slider"].red').focus();
  }
});
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 4`] = `
"export function setFocusAfterRedSlider(testPageDocument) {
  // sets focus on a link after the Red slider
  testPageDocument.querySelector('#afterlink').focus();
}

export function setFocusBeforeRedSlider(testPageDocument) {
  // sets focus on a link before the Red slider
  testPageDocument.querySelector('#beforelink').focus();
}

export function setFocusOnRedSlider(testPageDocument) {
  // sets focus on the 'Red' slider
  testPageDocument.querySelector('[role="slider"].red').focus();
}
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 5`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-05-navForwardsToSlider-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToSlider-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 6`] = `
"{
  "info": {
    "testId": "navForwardsToSlider",
    "title": "Navigate forwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusBeforeRedSlider.html",
    "setupScript": {
      "script": "setFocusBeforeRedSlider",
      "scriptDescription": "sets focus on a link before the Red slider",
      "name": "setFocusBeforeRedSlider",
      "source": "// sets focus on a link before the Red slider\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeRedSlider.module.js",
      "jsonpPath": "scripts/setFocusBeforeRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "down down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        },
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow then Down Arrow",
      "presentationNumber": 1,
      "settings": "virtualCursor"
    },
    {
      "id": "f",
      "keypresses": [
        {
          "id": "f",
          "keystroke": "f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "f",
      "presentationNumber": 1.1,
      "settings": "virtualCursor"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [
        {
          "priority": 2,
          "assertionId": "interactionModeEnabled"
        }
      ],
      "keystroke": "Tab",
      "presentationNumber": 1.2,
      "settings": "virtualCursor"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 1.3,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 7`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-05-navForwardsToSlider-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToSlider-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 8`] = `
"{
  "info": {
    "testId": "navForwardsToSlider",
    "title": "Navigate forwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusBeforeRedSlider.html",
    "setupScript": {
      "script": "setFocusBeforeRedSlider",
      "scriptDescription": "sets focus on a link before the Red slider",
      "name": "setFocusBeforeRedSlider",
      "source": "// sets focus on a link before the Red slider\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeRedSlider.module.js",
      "jsonpPath": "scripts/setFocusBeforeRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "down down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        },
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow then Down Arrow",
      "presentationNumber": 1,
      "settings": "browseMode"
    },
    {
      "id": "f",
      "keypresses": [
        {
          "id": "f",
          "keystroke": "f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "f",
      "presentationNumber": 1.1,
      "settings": "browseMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [
        {
          "priority": 2,
          "assertionId": "interactionModeEnabled"
        }
      ],
      "keystroke": "Tab",
      "presentationNumber": 1.2,
      "settings": "browseMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 1.3,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 9`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-05-navForwardsToSlider-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToSlider-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 10`] = `
"{
  "info": {
    "testId": "navForwardsToSlider",
    "title": "Navigate forwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode_singleQuickKeyNavOn",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusBeforeRedSlider.html",
    "setupScript": {
      "script": "setFocusBeforeRedSlider",
      "scriptDescription": "sets focus on a link before the Red slider",
      "name": "setFocusBeforeRedSlider",
      "source": "// sets focus on a link before the Red slider\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeRedSlider.module.js",
      "jsonpPath": "scripts/setFocusBeforeRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ],
      "singleQuickKeyNavOn": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
        "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+right ctrl+opt+right",
      "keypresses": [
        {
          "id": "ctrl+opt+right",
          "keystroke": "Control+Option+Right Arrow"
        },
        {
          "id": "ctrl+opt+right",
          "keystroke": "Control+Option+Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Right Arrow then Control+Option+Right Arrow",
      "presentationNumber": 5,
      "settings": "defaultMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 5.2,
      "settings": "defaultMode"
    },
    {
      "id": "j",
      "keypresses": [
        {
          "id": "j",
          "keystroke": "j"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "j",
      "presentationNumber": 5.1,
      "settings": "singleQuickKeyNavOn"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 11`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a slider</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#slider" title="slider ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby" title="aria-labelledby ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation" title="aria-orientation ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin" title="aria-valuemin ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax" title="aria-valuemax ARIA Specification">

<script>
  let scripts = {
		setFocusBeforeRedSlider: function(testPageDocument){
			// sets focus on a link before the Red slider
			testPageDocument.querySelector('#beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "navForwardsToSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the Red slider",
  "specific_user_instruction": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
  "setupTestPage": "setFocusBeforeRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navForwardsToSlider",
        "command": "down down",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "f",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "virtualCursor",
        "presentationNumber": 1.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "pcCursor",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navForwardsToSlider",
        "command": "down down",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "f",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "browseMode",
        "presentationNumber": 1.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "focusMode",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navForwardsToSlider",
        "command": "ctrl+opt+right ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 5,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "defaultMode",
        "presentationNumber": 5.2,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "navForwardsToSlider": {
    "virtualCursor": {
      "jaws": [
        [ "down down|1" ],
        [ "f|1.1" ],
        [ "tab|1.2" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "tab|1.3" ] ] },
    "browseMode": {
      "nvda": [
        [ "down down|1" ],
        [ "f|1.1" ],
        [ "tab|1.2" ]
      ]
    },
    "focusMode": { "nvda": [ [ "tab|1.3" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+right ctrl+opt+right|5"
        ],
        [ "tab|5.2" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "j|5.1" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusBeforeRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 12`] = `
"{
  "task": "navForwardsToSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the Red slider",
  "specific_user_instruction": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
  "setupTestPage": "setFocusBeforeRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navForwardsToSlider",
        "command": "down down",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "f",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "virtualCursor",
        "presentationNumber": 1.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "pcCursor",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navForwardsToSlider",
        "command": "down down",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "f",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "browseMode",
        "presentationNumber": 1.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "focusMode",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navForwardsToSlider",
        "command": "ctrl+opt+right ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 5,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "defaultMode",
        "presentationNumber": 5.2,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 13`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-06-navBackToSlider-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToSlider-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 14`] = `
"{
  "info": {
    "testId": "navBackToSlider",
    "title": "Navigate backwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusAfterRedSlider.html",
    "setupScript": {
      "script": "setFocusAfterRedSlider",
      "scriptDescription": "sets focus on a link after the Red slider",
      "name": "setFocusAfterRedSlider",
      "source": "// sets focus on a link after the Red slider\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterRedSlider.module.js",
      "jsonpPath": "scripts/setFocusAfterRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 2,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+f",
      "keypresses": [
        {
          "id": "shift+f",
          "keystroke": "Shift+f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+f",
      "presentationNumber": 2.1,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [
        {
          "priority": 2,
          "assertionId": "interactionModeEnabled"
        }
      ],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.2,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.3,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 15`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-06-navBackToSlider-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToSlider-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 16`] = `
"{
  "info": {
    "testId": "navBackToSlider",
    "title": "Navigate backwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusAfterRedSlider.html",
    "setupScript": {
      "script": "setFocusAfterRedSlider",
      "scriptDescription": "sets focus on a link after the Red slider",
      "name": "setFocusAfterRedSlider",
      "source": "// sets focus on a link after the Red slider\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterRedSlider.module.js",
      "jsonpPath": "scripts/setFocusAfterRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 2,
      "settings": "browseMode"
    },
    {
      "id": "shift+f",
      "keypresses": [
        {
          "id": "shift+f",
          "keystroke": "Shift+f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+f",
      "presentationNumber": 2.1,
      "settings": "browseMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [
        {
          "priority": 2,
          "assertionId": "interactionModeEnabled"
        }
      ],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.2,
      "settings": "browseMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.3,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 17`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-06-navBackToSlider-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToSlider-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 18`] = `
"{
  "info": {
    "testId": "navBackToSlider",
    "title": "Navigate backwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode_singleQuickKeyNavOn",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusAfterRedSlider.html",
    "setupScript": {
      "script": "setFocusAfterRedSlider",
      "scriptDescription": "sets focus on a link after the Red slider",
      "name": "setFocusAfterRedSlider",
      "source": "// sets focus on a link after the Red slider\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterRedSlider.module.js",
      "jsonpPath": "scripts/setFocusAfterRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ],
      "singleQuickKeyNavOn": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
        "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+left ctrl+opt+left",
      "keypresses": [
        {
          "id": "ctrl+opt+left",
          "keystroke": "Control+Option+Left Arrow"
        },
        {
          "id": "ctrl+opt+left",
          "keystroke": "Control+Option+Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Left Arrow then Control+Option+Left Arrow",
      "presentationNumber": 6,
      "settings": "defaultMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 6.2,
      "settings": "defaultMode"
    },
    {
      "id": "shift+j",
      "keypresses": [
        {
          "id": "shift+j",
          "keystroke": "Shift+j"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+j",
      "presentationNumber": 6.1,
      "settings": "singleQuickKeyNavOn"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 19`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a slider</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#slider" title="slider ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby" title="aria-labelledby ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation" title="aria-orientation ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin" title="aria-valuemin ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax" title="aria-valuemax ARIA Specification">

<script>
  let scripts = {
		setFocusAfterRedSlider: function(testPageDocument){
			// sets focus on a link after the Red slider
			testPageDocument.querySelector('#afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "navBackToSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the Red slider",
  "specific_user_instruction": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
  "setupTestPage": "setFocusAfterRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navBackToSlider",
        "command": "up",
        "settings": "virtualCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+f",
        "settings": "virtualCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "virtualCursor",
        "presentationNumber": 2.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "pcCursor",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navBackToSlider",
        "command": "up",
        "settings": "browseMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+f",
        "settings": "browseMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "browseMode",
        "presentationNumber": 2.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "focusMode",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navBackToSlider",
        "command": "ctrl+opt+left ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 6,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "defaultMode",
        "presentationNumber": 6.2,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "navBackToSlider": {
    "virtualCursor": {
      "jaws": [
        [ "up|2" ],
        [ "shift+f|2.1" ],
        [ "shift+tab|2.2" ]
      ]
    },
    "pcCursor": {
      "jaws": [ [ "shift+tab|2.3" ] ]
    },
    "browseMode": {
      "nvda": [
        [ "up|2" ],
        [ "shift+f|2.1" ],
        [ "shift+tab|2.2" ]
      ]
    },
    "focusMode": {
      "nvda": [ [ "shift+tab|2.3" ] ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+left ctrl+opt+left|6"
        ],
        [ "shift+tab|6.2" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "shift+j|6.1" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusAfterRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 20`] = `
"{
  "task": "navBackToSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the Red slider",
  "specific_user_instruction": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
  "setupTestPage": "setFocusAfterRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navBackToSlider",
        "command": "up",
        "settings": "virtualCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+f",
        "settings": "virtualCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "virtualCursor",
        "presentationNumber": 2.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "pcCursor",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navBackToSlider",
        "command": "up",
        "settings": "browseMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+f",
        "settings": "browseMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "browseMode",
        "presentationNumber": 2.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "focusMode",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navBackToSlider",
        "command": "ctrl+opt+left ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 6,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "defaultMode",
        "presentationNumber": 6.2,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 21`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-09-reqInfoAboutSlider-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutSlider-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 22`] = `
"{
  "info": {
    "testId": "reqInfoAboutSlider",
    "title": "Request information about a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, read information about the slider.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 7,
      "settings": "virtualCursor"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 7.1,
      "settings": "virtualCursor"
    },
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 8,
      "settings": "pcCursor"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 8.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 23`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-09-reqInfoAboutSlider-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutSlider-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 24`] = `
"{
  "info": {
    "testId": "reqInfoAboutSlider",
    "title": "Request information about a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, read information about the slider.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 7,
      "settings": "browseMode"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 7.1,
      "settings": "browseMode"
    },
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 8,
      "settings": "focusMode"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 8.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 25`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-09-reqInfoAboutSlider-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutSlider-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 26`] = `
"{
  "info": {
    "testId": "reqInfoAboutSlider",
    "title": "Request information about a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, read information about the slider.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+f3",
      "keypresses": [
        {
          "id": "ctrl+opt+f3",
          "keystroke": "Control+Option+F3"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+F3",
      "presentationNumber": 9,
      "settings": "defaultMode"
    },
    {
      "id": "ctrl+opt+f4",
      "keypresses": [
        {
          "id": "ctrl+opt+f4",
          "keystroke": "Control+Option+F4"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+F4",
      "presentationNumber": 9.1,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 27`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Request information about a slider</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#slider" title="slider ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby" title="aria-labelledby ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation" title="aria-orientation ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin" title="aria-valuemin ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax" title="aria-valuemax ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "reqInfoAboutSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, read information about the slider.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "virtualCursor",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "virtualCursor",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "pcCursor",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "pcCursor",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "browseMode",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "browseMode",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "focusMode",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "focusMode",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ctrl+opt+f3",
        "settings": "defaultMode",
        "presentationNumber": 9,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ctrl+opt+f4",
        "settings": "defaultMode",
        "presentationNumber": 9.1,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "reqInfoAboutSlider": {
    "virtualCursor": {
      "jaws": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+f3|9" ],
        [ "ctrl+opt+f4|9.1" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 28`] = `
"{
  "task": "reqInfoAboutSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, read information about the slider.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "virtualCursor",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "virtualCursor",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "pcCursor",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "pcCursor",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "browseMode",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "browseMode",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "focusMode",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "focusMode",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ctrl+opt+f3",
        "settings": "defaultMode",
        "presentationNumber": 9,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ctrl+opt+f4",
        "settings": "defaultMode",
        "presentationNumber": 9.1,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 29`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-11-incrementSliderByOneStep-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-incrementSliderByOneStep-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 30`] = `
"{
  "info": {
    "testId": "incrementSliderByOneStep",
    "title": "Increment a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 11
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 129.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "right",
      "keypresses": [
        {
          "id": "right",
          "keystroke": "Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Right Arrow",
      "presentationNumber": 10,
      "settings": "pcCursor"
    },
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 10.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 31`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-11-incrementSliderByOneStep-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-incrementSliderByOneStep-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 32`] = `
"{
  "info": {
    "testId": "incrementSliderByOneStep",
    "title": "Increment a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 11
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 129.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "right",
      "keypresses": [
        {
          "id": "right",
          "keystroke": "Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Right Arrow",
      "presentationNumber": 10,
      "settings": "focusMode"
    },
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 10.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 33`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-11-incrementSliderByOneStep-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-incrementSliderByOneStep-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 34`] = `
"{
  "info": {
    "testId": "incrementSliderByOneStep",
    "title": "Increment a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 11
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "quickNavOff_defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 129.",
    "mode": {
      "quickNavOff": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
        "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
      ],
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "right",
      "keypresses": [
        {
          "id": "right",
          "keystroke": "Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Right Arrow",
      "presentationNumber": 11,
      "settings": "quickNavOff"
    },
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 11.1,
      "settings": "quickNavOff"
    },
    {
      "id": "ctrl+opt+shift+down ctrl+opt+up",
      "keypresses": [
        {
          "id": "ctrl+opt+shift+down",
          "keystroke": "Control+Option+Shift+Down Arrow"
        },
        {
          "id": "ctrl+opt+up",
          "keystroke": "Control+Option+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Shift+Down Arrow then Control+Option+Up Arrow",
      "presentationNumber": 11.2,
      "settings": "defaultMode"
    },
    {
      "id": "ctrl+opt+shift+down ctrl+opt+right",
      "keypresses": [
        {
          "id": "ctrl+opt+shift+down",
          "keystroke": "Control+Option+Shift+Down Arrow"
        },
        {
          "id": "ctrl+opt+right",
          "keystroke": "Control+Option+Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Shift+Down Arrow then Control+Option+Right Arrow",
      "presentationNumber": 11.3,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 35`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Increment a slider by one step</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "incrementSliderByOneStep",
  "mode": "pcCursor_focusMode_quickNavOff_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 129.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "pcCursor",
        "presentationNumber": 10,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "pcCursor",
        "presentationNumber": 10.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "focusMode",
        "presentationNumber": 10,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "focusMode",
        "presentationNumber": 10.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "quickNavOff",
        "presentationNumber": 11,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "quickNavOff",
        "presentationNumber": 11.1,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+up",
        "settings": "defaultMode",
        "presentationNumber": 11.2,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 11.3,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "incrementSliderByOneStep": {
    "pcCursor": {
      "jaws": [
        [ "right|10" ],
        [ "up|10.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "right|10" ],
        [ "up|10.1" ]
      ]
    },
    "quickNavOff": {
      "voiceover_macos": [
        [ "right|11" ],
        [ "up|11.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+shift+down ctrl+opt+up|11.2"
        ],
        [
          "ctrl+opt+shift+down ctrl+opt+right|11.3"
        ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 36`] = `
"{
  "task": "incrementSliderByOneStep",
  "mode": "pcCursor_focusMode_quickNavOff_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 129.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "pcCursor",
        "presentationNumber": 10,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "pcCursor",
        "presentationNumber": 10.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "focusMode",
        "presentationNumber": 10,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "focusMode",
        "presentationNumber": 10.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "quickNavOff",
        "presentationNumber": 11,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "quickNavOff",
        "presentationNumber": 11.1,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+up",
        "settings": "defaultMode",
        "presentationNumber": 11.2,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 11.3,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 37`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-13-decrementSliderByOneStep-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-decrementSliderByOneStep-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 38`] = `
"{
  "info": {
    "testId": "decrementSliderByOneStep",
    "title": "Decrement a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 13
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 127.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "left",
      "keypresses": [
        {
          "id": "left",
          "keystroke": "Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Left Arrow",
      "presentationNumber": 12,
      "settings": "pcCursor"
    },
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 12.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 39`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-13-decrementSliderByOneStep-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-decrementSliderByOneStep-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 40`] = `
"{
  "info": {
    "testId": "decrementSliderByOneStep",
    "title": "Decrement a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 13
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 127.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "left",
      "keypresses": [
        {
          "id": "left",
          "keystroke": "Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Left Arrow",
      "presentationNumber": 12,
      "settings": "focusMode"
    },
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 12.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 41`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-13-decrementSliderByOneStep-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-decrementSliderByOneStep-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 42`] = `
"{
  "info": {
    "testId": "decrementSliderByOneStep",
    "title": "Decrement a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 13
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "quickNavOff_defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 127.",
    "mode": {
      "quickNavOff": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
        "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
      ],
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "left",
      "keypresses": [
        {
          "id": "left",
          "keystroke": "Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Left Arrow",
      "presentationNumber": 13,
      "settings": "quickNavOff"
    },
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 13.1,
      "settings": "quickNavOff"
    },
    {
      "id": "ctrl+opt+shift+down ctrl+opt+down",
      "keypresses": [
        {
          "id": "ctrl+opt+shift+down",
          "keystroke": "Control+Option+Shift+Down Arrow"
        },
        {
          "id": "ctrl+opt+down",
          "keystroke": "Control+Option+Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Shift+Down Arrow then Control+Option+Down Arrow",
      "presentationNumber": 13.2,
      "settings": "defaultMode"
    },
    {
      "id": "ctrl+opt+shift+down ctrl+opt+left",
      "keypresses": [
        {
          "id": "ctrl+opt+shift+down",
          "keystroke": "Control+Option+Shift+Down Arrow"
        },
        {
          "id": "ctrl+opt+left",
          "keystroke": "Control+Option+Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Shift+Down Arrow then Control+Option+Left Arrow",
      "presentationNumber": 13.3,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 43`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Decrement a slider by one step</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "decrementSliderByOneStep",
  "mode": "pcCursor_focusMode_quickNavOff_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 127.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "pcCursor",
        "presentationNumber": 12,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "pcCursor",
        "presentationNumber": 12.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "focusMode",
        "presentationNumber": 12,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "focusMode",
        "presentationNumber": 12.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "quickNavOff",
        "presentationNumber": 13,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "quickNavOff",
        "presentationNumber": 13.1,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+down",
        "settings": "defaultMode",
        "presentationNumber": 13.2,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 13.3,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "decrementSliderByOneStep": {
    "pcCursor": {
      "jaws": [
        [ "left|12" ],
        [ "down|12.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "left|12" ],
        [ "down|12.1" ]
      ]
    },
    "quickNavOff": {
      "voiceover_macos": [
        [ "left|13" ],
        [ "down|13.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+shift+down ctrl+opt+down|13.2"
        ],
        [
          "ctrl+opt+shift+down ctrl+opt+left|13.3"
        ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 44`] = `
"{
  "task": "decrementSliderByOneStep",
  "mode": "pcCursor_focusMode_quickNavOff_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 127.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "pcCursor",
        "presentationNumber": 12,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "pcCursor",
        "presentationNumber": 12.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "focusMode",
        "presentationNumber": 12,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "focusMode",
        "presentationNumber": 12.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "quickNavOff",
        "presentationNumber": 13,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "quickNavOff",
        "presentationNumber": 13.1,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+down",
        "settings": "defaultMode",
        "presentationNumber": 13.2,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 13.3,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 45`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-15-incrementSliderByTenSteps-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-15-incrementSliderByTenSteps-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 46`] = `
"{
  "info": {
    "testId": "incrementSliderByTenSteps",
    "title": "Increment a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 15
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 138.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "pageUp",
      "keypresses": [
        {
          "id": "pageUp",
          "keystroke": "Page Up"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Up",
      "presentationNumber": 14,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 47`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-15-incrementSliderByTenSteps-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-15-incrementSliderByTenSteps-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 48`] = `
"{
  "info": {
    "testId": "incrementSliderByTenSteps",
    "title": "Increment a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 15
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 138.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "pageUp",
      "keypresses": [
        {
          "id": "pageUp",
          "keystroke": "Page Up"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Up",
      "presentationNumber": 14,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 49`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-15-incrementSliderByTenSteps-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-15-incrementSliderByTenSteps-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 50`] = `
"{
  "info": {
    "testId": "incrementSliderByTenSteps",
    "title": "Increment a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 15
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 138.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "pageUp",
      "keypresses": [
        {
          "id": "pageUp",
          "keystroke": "Page Up"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Up",
      "presentationNumber": 15,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 51`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Increment a slider by ten steps</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "incrementSliderByTenSteps",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 138.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "pcCursor",
        "presentationNumber": 14,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "focusMode",
        "presentationNumber": 14,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "defaultMode",
        "presentationNumber": 15,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "incrementSliderByTenSteps": {
    "pcCursor": { "jaws": [ [ "pageUp|14" ] ] },
    "focusMode": { "nvda": [ [ "pageUp|14" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "pageUp|15" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 52`] = `
"{
  "task": "incrementSliderByTenSteps",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 138.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "pcCursor",
        "presentationNumber": 14,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "focusMode",
        "presentationNumber": 14,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "defaultMode",
        "presentationNumber": 15,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 53`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-17-decrementSliderByTenSteps-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-decrementSliderByTenSteps-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 54`] = `
"{
  "info": {
    "testId": "decrementSliderByTenSteps",
    "title": "Decrement a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 17
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 118.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "pageDown",
      "keypresses": [
        {
          "id": "pageDown",
          "keystroke": "Page Down"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Down",
      "presentationNumber": 16,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 55`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-17-decrementSliderByTenSteps-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-decrementSliderByTenSteps-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 56`] = `
"{
  "info": {
    "testId": "decrementSliderByTenSteps",
    "title": "Decrement a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 17
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 118.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "pageDown",
      "keypresses": [
        {
          "id": "pageDown",
          "keystroke": "Page Down"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Down",
      "presentationNumber": 16,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 57`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-17-decrementSliderByTenSteps-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-decrementSliderByTenSteps-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 58`] = `
"{
  "info": {
    "testId": "decrementSliderByTenSteps",
    "title": "Decrement a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 17
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 118.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "pageDown",
      "keypresses": [
        {
          "id": "pageDown",
          "keystroke": "Page Down"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Down",
      "presentationNumber": 17,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 59`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Decrement a slider by ten steps</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "decrementSliderByTenSteps",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 118.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "pcCursor",
        "presentationNumber": 16,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "focusMode",
        "presentationNumber": 16,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "defaultMode",
        "presentationNumber": 17,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "decrementSliderByTenSteps": {
    "pcCursor": { "jaws": [ [ "pageDown|16" ] ] },
    "focusMode": { "nvda": [ [ "pageDown|16" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "pageDown|17" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 60`] = `
"{
  "task": "decrementSliderByTenSteps",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 118.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "pcCursor",
        "presentationNumber": 16,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "focusMode",
        "presentationNumber": 16,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "defaultMode",
        "presentationNumber": 17,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 61`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider to the minimum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-19-decrementSliderToMinimumValue-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-decrementSliderToMinimumValue-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 62`] = `
"{
  "info": {
    "testId": "decrementSliderToMinimumValue",
    "title": "Decrement a slider to the minimum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 19
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 0.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "home",
      "keypresses": [
        {
          "id": "home",
          "keystroke": "Home"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Home",
      "presentationNumber": 18,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 63`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider to the minimum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-19-decrementSliderToMinimumValue-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-decrementSliderToMinimumValue-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 64`] = `
"{
  "info": {
    "testId": "decrementSliderToMinimumValue",
    "title": "Decrement a slider to the minimum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 19
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 0.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "home",
      "keypresses": [
        {
          "id": "home",
          "keystroke": "Home"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Home",
      "presentationNumber": 18,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 65`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider to the minimum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-19-decrementSliderToMinimumValue-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-decrementSliderToMinimumValue-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 66`] = `
"{
  "info": {
    "testId": "decrementSliderToMinimumValue",
    "title": "Decrement a slider to the minimum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 19
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 0.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "home",
      "keypresses": [
        {
          "id": "home",
          "keystroke": "Home"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Home",
      "presentationNumber": 19,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 67`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Decrement a slider to the minimum value</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "decrementSliderToMinimumValue",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 0.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "pcCursor",
        "presentationNumber": 18,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "focusMode",
        "presentationNumber": 18,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "defaultMode",
        "presentationNumber": 19,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "decrementSliderToMinimumValue": {
    "pcCursor": { "jaws": [ [ "home|18" ] ] },
    "focusMode": { "nvda": [ [ "home|18" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "home|19" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 68`] = `
"{
  "task": "decrementSliderToMinimumValue",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 0.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "pcCursor",
        "presentationNumber": 18,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "focusMode",
        "presentationNumber": 18,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "defaultMode",
        "presentationNumber": 19,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 69`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider to the maximum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-21-incrementSliderToMaximumValue-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-incrementSliderToMaximumValue-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 70`] = `
"{
  "info": {
    "testId": "incrementSliderToMaximumValue",
    "title": "Increment a slider to the maximum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 21
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 255.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "end",
      "keypresses": [
        {
          "id": "end",
          "keystroke": "End"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "End",
      "presentationNumber": 20,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 71`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider to the maximum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-21-incrementSliderToMaximumValue-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-incrementSliderToMaximumValue-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 72`] = `
"{
  "info": {
    "testId": "incrementSliderToMaximumValue",
    "title": "Increment a slider to the maximum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 21
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 255.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "end",
      "keypresses": [
        {
          "id": "end",
          "keystroke": "End"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "End",
      "presentationNumber": 20,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 73`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider to the maximum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-21-incrementSliderToMaximumValue-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-incrementSliderToMaximumValue-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 74`] = `
"{
  "info": {
    "testId": "incrementSliderToMaximumValue",
    "title": "Increment a slider to the maximum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 21
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 255.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "end",
      "keypresses": [
        {
          "id": "end",
          "keystroke": "End"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "End",
      "presentationNumber": 21,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 75`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Increment a slider to the maximum value</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "incrementSliderToMaximumValue",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 255.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "pcCursor",
        "presentationNumber": 20,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "focusMode",
        "presentationNumber": 20,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "defaultMode",
        "presentationNumber": 21,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "incrementSliderToMaximumValue": {
    "pcCursor": { "jaws": [ [ "end|20" ] ] },
    "focusMode": { "nvda": [ [ "end|20" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "end|21" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`V2 test format version runs createAllTests successfully (horizontal-slider) 76`] = `
"{
  "task": "incrementSliderToMaximumValue",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 255.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "pcCursor",
        "presentationNumber": 20,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "focusMode",
        "presentationNumber": 20,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "defaultMode",
        "presentationNumber": 21,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 1`] = `
"{
  "triggerAlert": {
    "virtualCursor": {
      "jaws": [
        [ "space|1" ],
        [ "enter|1.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "space|2" ],
        [
          "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space|2.1"
        ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "space|1" ],
        [ "enter|1.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "space|2" ],
        [ "enter|2.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+space|3" ],
        [ "space|3.1" ],
        [ "enter|3.2" ]
      ]
    }
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 2`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <title>Index of Assistive Technology Test Files</title>
  <style>
    table {
      display: table;
      border-collapse: collapse;
      border-spacing: 2px;
      border-color: rgb(128,128,128);
    }

    thead {
      display: table-row-group;
      vertical-align: middle;
      border-bottom: black solid 2px;
    }

    tbody {
      display: table-row-group;
      vertical-align: middle;
      border-color: rgb(128,128,128);
    }

    tr:nth-child(even) {background: #DDD}
    tr:nth-child(odd) {background: #FFF}

    tr {
      display: table-row;
      vertical-align: inherit;
      border-color: rgb(128,128,128);
    }

    td {
      padding: 3px;
      display: table-cell;
    }

    td.test {
      text-align: center;
    }

    td.none {
      color: #333;
    }

    th {
      padding: 3px;
      font-weight: bold;
      display: table-cell;
    }
  </style>
</head>
<body>
 <main>
  <h1>Index of Assistive Technology Test Files</h1>
  <p>This is useful for viewing the local files on a local web server.</p>
  <table>
    <thead>
      <tr>
        <th>Sequence</th>
        <th>Task ID</th>
        <th>Testing Task</th>
        <th>JAWS</th>
<th>NVDA</th>
<th>VoiceOver for macOS</th>

        <th>Setup Script Reference</th>
      </tr>
    </thead>
    <tbody>
<tr><td>1</td><td>triggerAlert</td><td scope="row">Trigger an alert</td><td class="test"><a href="test-03-triggerAlert.html?at=jaws" aria-label="JAWS test for task triggerAlert">JAWS</a></td><td class="test"><a href="test-03-triggerAlert.html?at=nvda" aria-label="NVDA test for task triggerAlert">NVDA</a></td><td class="test"><a href="test-03-triggerAlert.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task triggerAlert">VoiceOver for macOS</a></td><td>setFocusOnButton</td></tr>

    </tbody>
  </table>
  </main>
</body>
"
`;

exports[`all test format versions runs createAllTests successfully 3`] = `
"window[document.currentScript.getAttribute("jsonpFunction") || "scriptsJsonpLoaded"]({
  setFocusOnButton(testPageDocument) {
    // sets focus on the 'Trigger Alert' button
    testPageDocument.querySelector('#alert-trigger').focus();
  }
});
"
`;

exports[`all test format versions runs createAllTests successfully 4`] = `
"export function setFocusOnButton(testPageDocument) {
  // sets focus on the 'Trigger Alert' button
  testPageDocument.querySelector('#alert-trigger').focus();
}
"
`;

exports[`all test format versions runs createAllTests successfully 5`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Trigger an alert</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/">
    <link rel="preload" href="test-03-triggerAlert-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-03-triggerAlert-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 6`] = `
"{
  "info": {
    "testId": "triggerAlert",
    "title": "Trigger an alert",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/",
        "linkText": "APG Example: Alert"
      }
    ],
    "presentationNumber": 3
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_144013/alert.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the 'Trigger Alert' button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the 'Trigger Alert' button\\ntestPageDocument.querySelector('#alert-trigger').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 1,
      "settings": "virtualCursor"
    },
    {
      "id": "enter",
      "keypresses": [
        {
          "id": "enter",
          "keystroke": "Enter"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Enter",
      "presentationNumber": 1.1,
      "settings": "virtualCursor"
    },
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 2,
      "settings": "pcCursor"
    },
    {
      "id": "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space",
      "keypresses": [
        {
          "id": "jaws",
          "keystroke": "Insert"
        },
        {
          "id": "nvda",
          "keystroke": "Insert"
        },
        {
          "id": "vo",
          "keystroke": "Control+Option"
        },
        {
          "id": "del",
          "keystroke": "Delete"
        },
        {
          "id": "delete",
          "keystroke": "Delete"
        },
        {
          "id": "esc",
          "keystroke": "Escape"
        },
        {
          "id": "escape",
          "keystroke": "Escape"
        },
        {
          "id": "jaws+space",
          "keystroke": "Insert+Space"
        },
        {
          "id": "nvda+space",
          "keystroke": "Insert+Space"
        },
        {
          "id": "vo+space",
          "keystroke": "Control+Option+Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert then Insert then Control+Option then Delete then Delete then Escape then Escape then Insert+Space then Insert+Space then Control+Option+Space",
      "presentationNumber": 2.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 7`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Trigger an alert</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/">
    <link rel="preload" href="test-03-triggerAlert-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-03-triggerAlert-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 8`] = `
"{
  "info": {
    "testId": "triggerAlert",
    "title": "Trigger an alert",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/",
        "linkText": "APG Example: Alert"
      }
    ],
    "presentationNumber": 3
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_144013/alert.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the 'Trigger Alert' button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the 'Trigger Alert' button\\ntestPageDocument.querySelector('#alert-trigger').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 1,
      "settings": "browseMode"
    },
    {
      "id": "enter",
      "keypresses": [
        {
          "id": "enter",
          "keystroke": "Enter"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Enter",
      "presentationNumber": 1.1,
      "settings": "browseMode"
    },
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 2,
      "settings": "focusMode"
    },
    {
      "id": "enter",
      "keypresses": [
        {
          "id": "enter",
          "keystroke": "Enter"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Enter",
      "presentationNumber": 2.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 9`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Trigger an alert</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/">
    <link rel="preload" href="test-03-triggerAlert-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-03-triggerAlert-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 10`] = `
"{
  "info": {
    "testId": "triggerAlert",
    "title": "Trigger an alert",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/alert/examples/alert/",
        "linkText": "APG Example: Alert"
      }
    ],
    "presentationNumber": 3
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_144013/alert.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the 'Trigger Alert' button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the 'Trigger Alert' button\\ntestPageDocument.querySelector('#alert-trigger').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+space",
      "keypresses": [
        {
          "id": "ctrl+opt+space",
          "keystroke": "Control+Option+Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Space",
      "presentationNumber": 3,
      "settings": "defaultMode"
    },
    {
      "id": "space",
      "keypresses": [
        {
          "id": "space",
          "keystroke": "Space"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Space",
      "presentationNumber": 3.1,
      "settings": "defaultMode"
    },
    {
      "id": "enter",
      "keypresses": [
        {
          "id": "enter",
          "keystroke": "Enter"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Enter",
      "presentationNumber": 3.2,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 11`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Trigger an alert</title>

<script>
  let scripts = {
		setFocusOnButton: function(testPageDocument){
			// sets focus on the 'Trigger Alert' button
			testPageDocument.querySelector('#alert-trigger').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "triggerAlert",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Trigger Alert' button",
  "specific_user_instruction": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
  "setupTestPage": "setFocusOnButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "pcCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space",
        "settings": "pcCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "focusMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "focusMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "triggerAlert",
        "command": "ctrl+opt+space",
        "settings": "defaultMode",
        "presentationNumber": 3,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "defaultMode",
        "presentationNumber": 3.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "defaultMode",
        "presentationNumber": 3.2,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "triggerAlert": {
    "virtualCursor": {
      "jaws": [
        [ "space|1" ],
        [ "enter|1.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "space|2" ],
        [
          "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space|2.1"
        ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "space|1" ],
        [ "enter|1.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "space|2" ],
        [ "enter|2.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+space|3" ],
        [ "space|3.1" ],
        [ "enter|3.2" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-8_144013/alert.setFocusOnButton.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 12`] = `
"{
  "task": "triggerAlert",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Trigger Alert' button",
  "specific_user_instruction": "Starting at the 'Trigger Alert' button, activate the button to trigger the alert.",
  "setupTestPage": "setFocusOnButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleAlert",
      "priority": 3,
      "assertionStatement": "Role 'alert' is conveyed",
      "assertionPhrase": "convey role 'alert'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "textHello",
      "priority": 1,
      "assertionStatement": "Text 'Hello' is conveyed",
      "assertionPhrase": "convey text 'Hello'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "pcCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "jaws nvda vo del delete esc escape jaws+space nvda+space vo+space",
        "settings": "pcCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "focusMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "focusMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "triggerAlert",
        "command": "ctrl+opt+space",
        "settings": "defaultMode",
        "presentationNumber": 3,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "space",
        "settings": "defaultMode",
        "presentationNumber": 3.1,
        "assertionExceptions": ""
      },
      {
        "testId": "triggerAlert",
        "command": "enter",
        "settings": "defaultMode",
        "presentationNumber": 3.2,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 13`] = `
"{
  "navigate forwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "R" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ]
      ],
      "nvda": [
        [ "D" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ],
        [ "K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  },
  "navigate backwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ],
        [ "SHIFT_K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  },
  "navigate forwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "DOWN" ], [ "U" ] ],
      "nvda": [ [ "DOWN" ], [ "U" ], [ "K" ] ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  },
  "navigate backwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "UP" ], [ "SHIFT_U" ] ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_K" ],
        [ "SHIFT_U" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  },
  "navigate forwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ],
      "nvda": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_J" ],
        [ "TAB" ]
      ]
    }
  },
  "navigate backwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_J" ],
        [ "SHIFT_TAB" ]
      ]
    }
  },
  "navigate forwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "G" ] ],
      "nvda": [ [ "G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_G" ] ]
    }
  },
  "navigate backwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "SHIFT_G" ] ],
      "nvda": [ [ "SHIFT_G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_G" ] ]
    }
  },
  "navigate forwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [ [ "H" ], [ "ONE" ] ],
      "nvda": [ [ "H" ], [ "ONE" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_H" ] ]
    }
  },
  "navigate backwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ],
      "nvda": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_H" ] ]
    }
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 14`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <title>Index of Assistive Technology Test Files</title>
  <style>
    table {
      display: table;
      border-collapse: collapse;
      border-spacing: 2px;
      border-color: rgb(128,128,128);
    }

    thead {
      display: table-row-group;
      vertical-align: middle;
      border-bottom: black solid 2px;
    }

    tbody {
      display: table-row-group;
      vertical-align: middle;
      border-color: rgb(128,128,128);
    }

    tr:nth-child(even) {background: #DDD}
    tr:nth-child(odd) {background: #FFF}

    tr {
      display: table-row;
      vertical-align: inherit;
      border-color: rgb(128,128,128);
    }

    td {
      padding: 3px;
      display: table-cell;
    }

    td.test {
      text-align: center;
    }

    td.none {
      color: #333;
    }

    th {
      padding: 3px;
      font-weight: bold;
      display: table-cell;
    }
  </style>
</head>
<body>
 <main>
  <h1>Index of Assistive Technology Test Files</h1>
  <p>This is useful for viewing the local files on a local web server.</p>
  <table>
    <thead>
      <tr>
        <th>Task ID</th>
        <th>Testing Task</th>
        <th>JAWS</th>
<th>NVDA</th>
<th>VoiceOver for macOS</th>

        <th>Setup Script Reference</th>
      </tr>
    </thead>
    <tbody>
<tr><td>1</td><td scope="row">Navigate forwards into a banner landmark in reading mode</td><td class="test"><a href="test-01-navigate-forwards-into-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 1">JAWS</a></td><td class="test"><a href="test-01-navigate-forwards-into-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 1">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBanner</td></tr>
<tr><td>2</td><td scope="row">Navigate forwards into a banner landmark in interaction mode</td><td class="test"><a href="test-02-navigate-forwards-into-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 2">JAWS</a></td><td class="test"><a href="test-02-navigate-forwards-into-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 2">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBanner</td></tr>
<tr><td>3</td><td scope="row">Navigate forwards into a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-03-navigate-forwards-into-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 3">VoiceOver for macOS</a></td><td>setFocusBeforeBanner</td></tr>
<tr><td>4</td><td scope="row">Navigate backwards into a banner landmark in reading mode</td><td class="test"><a href="test-04-navigate-backwards-into-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 4">JAWS</a></td><td class="test"><a href="test-04-navigate-backwards-into-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 4">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBanner</td></tr>
<tr><td>5</td><td scope="row">Navigate backwards into a banner landmark in interaction mode</td><td class="test"><a href="test-05-navigate-backwards-into-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 5">JAWS</a></td><td class="test"><a href="test-05-navigate-backwards-into-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 5">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBanner</td></tr>
<tr><td>6</td><td scope="row">Navigate backwards into a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-06-navigate-backwards-into-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 6">VoiceOver for macOS</a></td><td>setFocusAfterBanner</td></tr>
<tr><td>7</td><td scope="row">Navigate forwards out of a banner landmark in reading mode</td><td class="test"><a href="test-07-navigate-forwards-out-of-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 7">JAWS</a></td><td class="test"><a href="test-07-navigate-forwards-out-of-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 7">NVDA</a></td><td class="test none">not included</td><td>setFocusOnBottomLink</td></tr>
<tr><td>8</td><td scope="row">Navigate forwards out of a banner landmark in interaction mode</td><td class="test"><a href="test-08-navigate-forwards-out-of-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 8">JAWS</a></td><td class="test"><a href="test-08-navigate-forwards-out-of-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 8">NVDA</a></td><td class="test none">not included</td><td>setFocusOnBottomLink</td></tr>
<tr><td>9</td><td scope="row">Navigate forwards out of a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-09-navigate-forwards-out-of-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 9">VoiceOver for macOS</a></td><td>setFocusOnBottomLink</td></tr>
<tr><td>10</td><td scope="row">Navigate backwards out of a banner landmark in reading mode</td><td class="test"><a href="test-10-navigate-backwards-out-of-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 10">JAWS</a></td><td class="test"><a href="test-10-navigate-backwards-out-of-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 10">NVDA</a></td><td class="test none">not included</td><td>setFocusOnTopLink</td></tr>
<tr><td>11</td><td scope="row">Navigate backwards out of a banner landmark in interaction mode</td><td class="test"><a href="test-11-navigate-backwards-out-of-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 11">JAWS</a></td><td class="test"><a href="test-11-navigate-backwards-out-of-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 11">NVDA</a></td><td class="test none">not included</td><td>setFocusOnTopLink</td></tr>
<tr><td>12</td><td scope="row">Navigate backwards out of a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-12-navigate-backwards-out-of-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 12">VoiceOver for macOS</a></td><td>setFocusOnTopLink</td></tr>
<tr><td>13</td><td scope="row">Navigate forwards to a button inside a banner landmark in reading mode</td><td class="test"><a href="test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 13">JAWS</a></td><td class="test"><a href="test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 13">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBannerAndHideTopLink</td></tr>
<tr><td>14</td><td scope="row">Navigate forwards to a button inside a banner landmark in interaction mode</td><td class="test"><a href="test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 14">JAWS</a></td><td class="test"><a href="test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 14">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBannerAndHideTopLink</td></tr>
<tr><td>15</td><td scope="row">Navigate forwards to a button inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-15-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 15">VoiceOver for macOS</a></td><td>setFocusBeforeBannerAndHideTopLink</td></tr>
<tr><td>16</td><td scope="row">Navigate backwards to a button inside a banner landmark in reading mode</td><td class="test"><a href="test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 16">JAWS</a></td><td class="test"><a href="test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 16">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBannerAndHideBottomLink</td></tr>
<tr><td>17</td><td scope="row">Navigate backwards to a button inside a banner landmark in interaction mode</td><td class="test"><a href="test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction.html?at=jaws" aria-label="JAWS test for task 17">JAWS</a></td><td class="test"><a href="test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction.html?at=nvda" aria-label="NVDA test for task 17">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBannerAndHideBottomLink</td></tr>
<tr><td>18</td><td scope="row">Navigate backwards to a button inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-18-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 18">VoiceOver for macOS</a></td><td>setFocusAfterBannerAndHideBottomLink</td></tr>
<tr><td>19</td><td scope="row">Navigate forwards to an image inside a banner landmark in reading mode</td><td class="test"><a href="test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 19">JAWS</a></td><td class="test"><a href="test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 19">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBanner</td></tr>
<tr><td>20</td><td scope="row">Navigate forwards to an image inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-20-navigate-forwards-to-an-image-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 20">VoiceOver for macOS</a></td><td>setFocusBeforeBanner</td></tr>
<tr><td>21</td><td scope="row">Navigate backwards to an image inside a banner landmark in reading mode</td><td class="test"><a href="test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 21">JAWS</a></td><td class="test"><a href="test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 21">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBanner</td></tr>
<tr><td>22</td><td scope="row">Navigate backwards to an image inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-22-navigate-backwards-to-an-image-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 22">VoiceOver for macOS</a></td><td>setFocusAfterBanner</td></tr>
<tr><td>23</td><td scope="row">Navigate forwards to a heading inside a banner landmark in reading mode</td><td class="test"><a href="test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 23">JAWS</a></td><td class="test"><a href="test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 23">NVDA</a></td><td class="test none">not included</td><td>setFocusBeforeBanner</td></tr>
<tr><td>24</td><td scope="row">Navigate forwards to a heading inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-24-navigate-forwards-to-a-heading-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 24">VoiceOver for macOS</a></td><td>setFocusBeforeBanner</td></tr>
<tr><td>25</td><td scope="row">Navigate backwards to a heading inside a banner landmark in reading mode</td><td class="test"><a href="test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading.html?at=jaws" aria-label="JAWS test for task 25">JAWS</a></td><td class="test"><a href="test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading.html?at=nvda" aria-label="NVDA test for task 25">NVDA</a></td><td class="test none">not included</td><td>setFocusAfterBanner</td></tr>
<tr><td>26</td><td scope="row">Navigate backwards to a heading inside a banner landmark</td><td class="test none">not included</td><td class="test none">not included</td><td class="test"><a href="test-26-navigate-backwards-to-a-heading-inside-a-banner-landmark-interaction.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task 26">VoiceOver for macOS</a></td><td>setFocusAfterBanner</td></tr>

    </tbody>
  </table>
  </main>
</body>
"
`;

exports[`all test format versions runs createAllTests successfully 15`] = `
"window[document.currentScript.getAttribute("jsonpFunction") || "scriptsJsonpLoaded"]({
  setFocusAfterBanner(testPageDocument) {
    // sets focus on a link after the banner landmark
    testPageDocument.getElementById('afterlink').focus();
  },
  setFocusAfterBannerAndHideBottomLink(testPageDocument) {
    // sets focus on a link after the banner landmark, and hides the last link inside the landmark region
    testPageDocument.getElementById('bottom').setAttribute('hidden', '');
    testPageDocument.getElementById('afterlink').focus();
  },
  setFocusBeforeBanner(testPageDocument) {
    // sets focus on a link before the banner landmark
    testPageDocument.getElementById('beforelink').focus();
  },
  setFocusBeforeBannerAndHideTopLink(testPageDocument) {
    // sets focus on a link before the banner landmark, and hides the first link inside the landmark region
    testPageDocument.getElementById('top').setAttribute('hidden', '');
    testPageDocument.getElementById('beforelink').focus();
  },
  setFocusOnBottomLink(testPageDocument) {
    // sets focus on the 'Bottom' link
    testPageDocument.getElementById('bottom').focus();
  },
  setFocusOnTopLink(testPageDocument) {
    // sets focus on the 'Top' link
    testPageDocument.getElementById('top').focus();
  }
});
"
`;

exports[`all test format versions runs createAllTests successfully 16`] = `
"export function setFocusAfterBanner(testPageDocument) {
  // sets focus on a link after the banner landmark
  testPageDocument.getElementById('afterlink').focus();
}

export function setFocusAfterBannerAndHideBottomLink(testPageDocument) {
  // sets focus on a link after the banner landmark, and hides the last link inside the landmark region
  testPageDocument.getElementById('bottom').setAttribute('hidden', '');
  testPageDocument.getElementById('afterlink').focus();
}

export function setFocusBeforeBanner(testPageDocument) {
  // sets focus on a link before the banner landmark
  testPageDocument.getElementById('beforelink').focus();
}

export function setFocusBeforeBannerAndHideTopLink(testPageDocument) {
  // sets focus on a link before the banner landmark, and hides the first link inside the landmark region
  testPageDocument.getElementById('top').setAttribute('hidden', '');
  testPageDocument.getElementById('beforelink').focus();
}

export function setFocusOnBottomLink(testPageDocument) {
  // sets focus on the 'Bottom' link
  testPageDocument.getElementById('bottom').focus();
}

export function setFocusOnTopLink(testPageDocument) {
  // sets focus on the 'Top' link
  testPageDocument.getElementById('top').focus();
}
"
`;

exports[`all test format versions runs createAllTests successfully 17`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-01-navigate-forwards-into-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-01-navigate-forwards-into-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 18`] = `
"{
  "info": {
    "testId": 1,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "R",
      "keystroke": "R",
      "keypresses": [
        {
          "id": "R",
          "keystroke": "R"
        }
      ]
    },
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    },
    {
      "id": "U",
      "keystroke": "U",
      "keypresses": [
        {
          "id": "U",
          "keystroke": "U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 19`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-01-navigate-forwards-into-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-01-navigate-forwards-into-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 20`] = `
"{
  "info": {
    "testId": 1,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "D",
      "keystroke": "D",
      "keypresses": [
        {
          "id": "D",
          "keystroke": "D"
        }
      ]
    },
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    },
    {
      "id": "U",
      "keystroke": "U",
      "keypresses": [
        {
          "id": "U",
          "keystroke": "U"
        }
      ]
    },
    {
      "id": "K",
      "keystroke": "K",
      "keypresses": [
        {
          "id": "K",
          "keystroke": "K"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 21`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards into a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards into a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "R" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ]
      ],
      "nvda": [
        [ "D" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ],
        [ "K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 22`] = `
"{
  "task": "navigate forwards into a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 23`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-02-navigate-forwards-into-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-02-navigate-forwards-into-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 24`] = `
"{
  "info": {
    "testId": 2,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 25`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-02-navigate-forwards-into-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-02-navigate-forwards-into-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 26`] = `
"{
  "info": {
    "testId": 2,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 27`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards into a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "R" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ]
      ],
      "nvda": [
        [ "D" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ],
        [ "K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 28`] = `
"{
  "task": "navigate forwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 29`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards into a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-03-navigate-forwards-into-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-03-navigate-forwards-into-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 30`] = `
"{
  "info": {
    "testId": 3,
    "task": "navigate forwards into a banner landmark",
    "title": "Navigate forwards into a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT",
      "keystroke": "Control+Option+Right, then Control+Option+Right",
      "keypresses": [
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        },
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        }
      ]
    },
    {
      "id": "CTRL_OPT_CMD_L",
      "keystroke": "Control+Option+Command+L",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_L",
          "keystroke": "Control+Option+Command+L"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Top' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 31`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards into a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "R" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ]
      ],
      "nvda": [
        [ "D" ],
        [ "DOWN" ],
        [ "TAB" ],
        [ "U" ],
        [ "K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 32`] = `
"{
  "task": "navigate forwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Top' link.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Top' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 33`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-04-navigate-backwards-into-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-04-navigate-backwards-into-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 34`] = `
"{
  "info": {
    "testId": 4,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    },
    {
      "id": "SHIFT_U",
      "keystroke": "Shift+U",
      "keypresses": [
        {
          "id": "SHIFT_U",
          "keystroke": "Shift+U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 35`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-04-navigate-backwards-into-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-04-navigate-backwards-into-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 36`] = `
"{
  "info": {
    "testId": 4,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    },
    {
      "id": "SHIFT_U",
      "keystroke": "Shift+U",
      "keypresses": [
        {
          "id": "SHIFT_U",
          "keystroke": "Shift+U"
        }
      ]
    },
    {
      "id": "SHIFT_K",
      "keystroke": "Shift+K",
      "keypresses": [
        {
          "id": "SHIFT_K",
          "keystroke": "Shift+K"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 37`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards into a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards into a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ],
        [ "SHIFT_K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 38`] = `
"{
  "task": "navigate backwards into a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 39`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-05-navigate-backwards-into-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navigate-backwards-into-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 40`] = `
"{
  "info": {
    "testId": 5,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 41`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-05-navigate-backwards-into-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navigate-backwards-into-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 42`] = `
"{
  "info": {
    "testId": 5,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 43`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards into a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ],
        [ "SHIFT_K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 44`] = `
"{
  "task": "navigate backwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 45`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards into a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-06-navigate-backwards-into-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navigate-backwards-into-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 46`] = `
"{
  "info": {
    "testId": 6,
    "task": "navigate backwards into a banner landmark",
    "title": "Navigate backwards into a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_LEFT,CTRL_OPT_LEFT",
      "keystroke": "Ctrl+Option+Left, then Ctrl+Option+Left",
      "keypresses": [
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        },
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        }
      ]
    },
    {
      "id": "SHIFT_CTRL_OPT_CMD_L",
      "keystroke": "Shift+Control+Option+Command+L",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_L",
          "keystroke": "Shift+Control+Option+Command+L"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Bottom' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 47`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards into a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards into a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_TAB" ],
        [ "SHIFT_U" ],
        [ "SHIFT_K" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 48`] = `
"{
  "task": "navigate backwards into a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Bottom' link.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Bottom' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 49`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-07-navigate-forwards-out-of-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-07-navigate-forwards-out-of-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 50`] = `
"{
  "info": {
    "testId": 7,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "U",
      "keystroke": "U",
      "keypresses": [
        {
          "id": "U",
          "keystroke": "U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 51`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-07-navigate-forwards-out-of-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-07-navigate-forwards-out-of-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 52`] = `
"{
  "info": {
    "testId": 7,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "U",
      "keystroke": "U",
      "keypresses": [
        {
          "id": "U",
          "keystroke": "U"
        }
      ]
    },
    {
      "id": "K",
      "keystroke": "K",
      "keypresses": [
        {
          "id": "K",
          "keystroke": "K"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 53`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards out of a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnBottomLink: function(testPageDocument){
			// sets focus on the 'Bottom' link
			testPageDocument.getElementById('bottom').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards out of a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "DOWN" ], [ "U" ] ],
      "nvda": [ [ "DOWN" ], [ "U" ], [ "K" ] ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnBottomLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 54`] = `
"{
  "task": "navigate forwards out of a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With the reading cursor on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 55`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-08-navigate-forwards-out-of-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-08-navigate-forwards-out-of-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 56`] = `
"{
  "info": {
    "testId": 8,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 57`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-08-navigate-forwards-out-of-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-08-navigate-forwards-out-of-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 58`] = `
"{
  "info": {
    "testId": 8,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 59`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards out of a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnBottomLink: function(testPageDocument){
			// sets focus on the 'Bottom' link
			testPageDocument.getElementById('bottom').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "DOWN" ], [ "U" ] ],
      "nvda": [ [ "DOWN" ], [ "U" ], [ "K" ] ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnBottomLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 60`] = `
"{
  "task": "navigate forwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 61`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards out of a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-09-navigate-forwards-out-of-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-navigate-forwards-out-of-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 62`] = `
"{
  "info": {
    "testId": 9,
    "task": "navigate forwards out of a banner landmark",
    "title": "Navigate forwards out of a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnBottomLink.html",
    "setupScript": {
      "name": "setFocusOnBottomLink",
      "description": "sets focus on the 'Bottom' link",
      "source": "// sets focus on the 'Bottom' link\\ntestPageDocument.getElementById('bottom').focus();\\n",
      "modulePath": "scripts/setFocusOnBottomLink.module.js",
      "jsonpPath": "scripts/setFocusOnBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link."
    ],
    "raw": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT",
      "keystroke": "Control+Option+Right, then Control+Option+Right",
      "keypresses": [
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        },
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        }
      ]
    },
    {
      "id": "CTRL_OPT_CMD_L",
      "keystroke": "Control+Option+Command+L",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_L",
          "keystroke": "Control+Option+Command+L"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate backwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 63`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards out of a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnBottomLink: function(testPageDocument){
			// sets focus on the 'Bottom' link
			testPageDocument.getElementById('bottom').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "DOWN" ], [ "U" ] ],
      "nvda": [ [ "DOWN" ], [ "U" ], [ "K" ] ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnBottomLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 64`] = `
"{
  "task": "navigate forwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Bottom' link",
  "specific_user_instruction": "With focus on the 'Bottom' link, navigate to the 'Navigate backwards from here' link.",
  "setupTestPage": "setFocusOnBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate backwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 65`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-10-navigate-backwards-out-of-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-10-navigate-backwards-out-of-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 66`] = `
"{
  "info": {
    "testId": 10,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_U",
      "keystroke": "Shift+U",
      "keypresses": [
        {
          "id": "SHIFT_U",
          "keystroke": "Shift+U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 67`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-10-navigate-backwards-out-of-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-10-navigate-backwards-out-of-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 68`] = `
"{
  "info": {
    "testId": 10,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_K",
      "keystroke": "Shift+K",
      "keypresses": [
        {
          "id": "SHIFT_K",
          "keystroke": "Shift+K"
        }
      ]
    },
    {
      "id": "SHIFT_U",
      "keystroke": "Shift+U",
      "keypresses": [
        {
          "id": "SHIFT_U",
          "keystroke": "Shift+U"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 69`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards out of a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnTopLink: function(testPageDocument){
			// sets focus on the 'Top' link
			testPageDocument.getElementById('top').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards out of a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "UP" ], [ "SHIFT_U" ] ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_K" ],
        [ "SHIFT_U" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnTopLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 70`] = `
"{
  "task": "navigate backwards out of a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With the reading cursor on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 71`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-11-navigate-backwards-out-of-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-navigate-backwards-out-of-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 72`] = `
"{
  "info": {
    "testId": 11,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 73`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-11-navigate-backwards-out-of-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-navigate-backwards-out-of-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 74`] = `
"{
  "info": {
    "testId": 11,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 75`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards out of a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnTopLink: function(testPageDocument){
			// sets focus on the 'Top' link
			testPageDocument.getElementById('top').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "UP" ], [ "SHIFT_U" ] ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_K" ],
        [ "SHIFT_U" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnTopLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 76`] = `
"{
  "task": "navigate backwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 77`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards out of a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-12-navigate-backwards-out-of-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-12-navigate-backwards-out-of-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 78`] = `
"{
  "info": {
    "testId": 12,
    "task": "navigate backwards out of a banner landmark",
    "title": "Navigate backwards out of a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusOnTopLink.html",
    "setupScript": {
      "name": "setFocusOnTopLink",
      "description": "sets focus on the 'Top' link",
      "source": "// sets focus on the 'Top' link\\ntestPageDocument.getElementById('top').focus();\\n",
      "modulePath": "scripts/setFocusOnTopLink.module.js",
      "jsonpPath": "scripts/setFocusOnTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link."
    ],
    "raw": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_LEFT,CTRL_OPT_LEFT",
      "keystroke": "Ctrl+Option+Left, then Ctrl+Option+Left",
      "keypresses": [
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        },
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        }
      ]
    },
    {
      "id": "SHIFT_CTRL_OPT_CMD_L",
      "keystroke": "Shift+Control+Option+Command+L",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_L",
          "keystroke": "Shift+Control+Option+Command+L"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Banner landmark boundary is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'link' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Navigate forwards from here' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 79`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards out of a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusOnTopLink: function(testPageDocument){
			// sets focus on the 'Top' link
			testPageDocument.getElementById('top').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards out of a banner landmark": {
    "reading": {
      "jaws": [ [ "UP" ], [ "SHIFT_U" ] ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_K" ],
        [ "SHIFT_U" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_L" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusOnTopLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 80`] = `
"{
  "task": "navigate backwards out of a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Top' link",
  "specific_user_instruction": "With focus on the 'Top' link, navigate to the 'Navigate forwards from here' link.",
  "setupTestPage": "setFocusOnTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Banner landmark boundary is conveyed"
    ],
    [
      "1",
      "Role 'link' is conveyed"
    ],
    [
      "1",
      "Name 'Navigate forwards from here' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 81`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 82`] = `
"{
  "info": {
    "testId": 13,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "B",
      "keystroke": "B",
      "keypresses": [
        {
          "id": "B",
          "keystroke": "B"
        }
      ]
    },
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 83`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-navigate-forwards-to-a-button-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 84`] = `
"{
  "info": {
    "testId": 13,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "B",
      "keystroke": "B",
      "keypresses": [
        {
          "id": "B",
          "keystroke": "B"
        }
      ]
    },
    {
      "id": "DOWN",
      "keystroke": "Down Arrow",
      "keypresses": [
        {
          "id": "DOWN",
          "keystroke": "Down Arrow"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 85`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a button inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
<link rel="help" href="https://w3c.github.io/aria/#aria-expanded">

<script>
  let scripts = {
		setFocusBeforeBannerAndHideTopLink: function(testPageDocument){
			// sets focus on a link before the banner landmark, and hides the first link inside the landmark region
			testPageDocument.getElementById('top').setAttribute('hidden', '');
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ],
      "nvda": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_J" ],
        [ "TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 86`] = `
"{
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 87`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 88`] = `
"{
  "info": {
    "testId": 14,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 89`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-14-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 90`] = `
"{
  "info": {
    "testId": 14,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 91`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a button inside a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
<link rel="help" href="https://w3c.github.io/aria/#aria-expanded">

<script>
  let scripts = {
		setFocusBeforeBannerAndHideTopLink: function(testPageDocument){
			// sets focus on a link before the banner landmark, and hides the first link inside the landmark region
			testPageDocument.getElementById('top').setAttribute('hidden', '');
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ],
      "nvda": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_J" ],
        [ "TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 92`] = `
"{
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 93`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
    <link rel="help" href="https://w3c.github.io/aria/#aria-expanded">
    <link rel="preload" href="test-15-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-15-navigate-forwards-to-a-button-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 94`] = `
"{
  "info": {
    "testId": 15,
    "task": "navigate forwards to a button inside a banner landmark",
    "title": "Navigate forwards to a button inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-haspopup",
        "value": "https://w3c.github.io/aria/#aria-haspopup"
      },
      {
        "refId": "aria-expanded",
        "value": "https://w3c.github.io/aria/#aria-expanded"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html",
    "setupScript": {
      "name": "setFocusBeforeBannerAndHideTopLink",
      "description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
      "source": "// sets focus on a link before the banner landmark, and hides the first link inside the landmark region\\ntestPageDocument.getElementById('top').setAttribute('hidden', '');\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBannerAndHideTopLink.module.js",
      "jsonpPath": "scripts/setFocusBeforeBannerAndHideTopLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT",
      "keystroke": "Control+Option+Right, then Control+Option+Right",
      "keypresses": [
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        },
        {
          "id": "CTRL_OPT_RIGHT",
          "keystroke": "Control+Option+Right"
        }
      ]
    },
    {
      "id": "CTRL_OPT_CMD_J",
      "keystroke": "Control+Option+Command+J",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_J",
          "keystroke": "Control+Option+Command+J"
        }
      ]
    },
    {
      "id": "TAB",
      "keystroke": "Tab",
      "keypresses": [
        {
          "id": "TAB",
          "keystroke": "Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'menu button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Skip To Content' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "State 'collapsed' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Access key '0' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 95`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a button inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-haspopup">
<link rel="help" href="https://w3c.github.io/aria/#aria-expanded">

<script>
  let scripts = {
		setFocusBeforeBannerAndHideTopLink: function(testPageDocument){
			// sets focus on a link before the banner landmark, and hides the first link inside the landmark region
			testPageDocument.getElementById('top').setAttribute('hidden', '');
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ],
      "nvda": [
        [ "B" ],
        [ "DOWN" ],
        [ "TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "TAB" ] ],
      "nvda": [ [ "TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_RIGHT,CTRL_OPT_RIGHT"
        ],
        [ "CTRL_OPT_CMD_J" ],
        [ "TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBannerAndHideTopLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 96`] = `
"{
  "task": "navigate forwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark, and hides the first link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'Skip To Content' button.",
  "setupTestPage": "setFocusBeforeBannerAndHideTopLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'menu button' is conveyed"
    ],
    [
      "1",
      "Name 'Skip To Content' is conveyed"
    ],
    [
      "1",
      "State 'collapsed' is conveyed"
    ],
    [
      "1",
      "Access key '0' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 97`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 98`] = `
"{
  "info": {
    "testId": 16,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_B",
      "keystroke": "Shift+B",
      "keypresses": [
        {
          "id": "SHIFT_B",
          "keystroke": "Shift+B"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 99`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-16-navigate-backwards-to-a-button-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 100`] = `
"{
  "info": {
    "testId": 16,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "UP",
      "keystroke": "Up Arrow",
      "keypresses": [
        {
          "id": "UP",
          "keystroke": "Up Arrow"
        }
      ]
    },
    {
      "id": "SHIFT_B",
      "keystroke": "Shift+B",
      "keypresses": [
        {
          "id": "SHIFT_B",
          "keystroke": "Shift+B"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 101`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a button inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-describedby">

<script>
  let scripts = {
		setFocusAfterBannerAndHideBottomLink: function(testPageDocument){
			// sets focus on a link after the banner landmark, and hides the last link inside the landmark region
			testPageDocument.getElementById('bottom').setAttribute('hidden', '');
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_J" ],
        [ "SHIFT_TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 102`] = `
"{
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 103`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 104`] = `
"{
  "info": {
    "testId": 17,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "Verify the PC Cursor is active by pressing Alt+Delete. If it is not, turn off the Virtual Cursor by pressing Insert+Z."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 105`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark in interaction mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 106`] = `
"{
  "info": {
    "testId": 17,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark in interaction mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "If NVDA did not make the focus mode sound when the test page loaded, press Insert+Space to turn focus mode on."
  },
  "commands": [
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 107`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a button inside a banner landmark in interaction mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-describedby">

<script>
  let scripts = {
		setFocusAfterBannerAndHideBottomLink: function(testPageDocument){
			// sets focus on a link after the banner landmark, and hides the last link inside the landmark region
			testPageDocument.getElementById('bottom').setAttribute('hidden', '');
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_J" ],
        [ "SHIFT_TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 108`] = `
"{
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 109`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="help" href="https://w3c.github.io/aria/#aria-describedby">
    <link rel="preload" href="test-18-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-18-navigate-backwards-to-a-button-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 110`] = `
"{
  "info": {
    "testId": 18,
    "task": "navigate backwards to a button inside a banner landmark",
    "title": "Navigate backwards to a button inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      },
      {
        "refId": "aria-describedby",
        "value": "https://w3c.github.io/aria/#aria-describedby"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html",
    "setupScript": {
      "name": "setFocusAfterBannerAndHideBottomLink",
      "description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
      "source": "// sets focus on a link after the banner landmark, and hides the last link inside the landmark region\\ntestPageDocument.getElementById('bottom').setAttribute('hidden', '');\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBannerAndHideBottomLink.module.js",
      "jsonpPath": "scripts/setFocusAfterBannerAndHideBottomLink.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_LEFT,CTRL_OPT_LEFT",
      "keystroke": "Ctrl+Option+Left, then Ctrl+Option+Left",
      "keypresses": [
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        },
        {
          "id": "CTRL_OPT_LEFT",
          "keystroke": "Ctrl+Option+Left"
        }
      ]
    },
    {
      "id": "SHIFT_CTRL_OPT_CMD_J",
      "keystroke": "Shift+Control+Option+Command+J",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_J",
          "keystroke": "Shift+Control+Option+Command+J"
        }
      ]
    },
    {
      "id": "SHIFT_TAB",
      "keystroke": "Shift+Tab",
      "keypresses": [
        {
          "id": "SHIFT_TAB",
          "keystroke": "Shift+Tab"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'button' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'Show Headings' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 111`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a button inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">
<link rel="help" href="https://w3c.github.io/aria/#aria-describedby">

<script>
  let scripts = {
		setFocusAfterBannerAndHideBottomLink: function(testPageDocument){
			// sets focus on a link after the banner landmark, and hides the last link inside the landmark region
			testPageDocument.getElementById('bottom').setAttribute('hidden', '');
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a button inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ],
      "nvda": [
        [ "UP" ],
        [ "SHIFT_B" ],
        [ "SHIFT_TAB" ]
      ]
    },
    "interaction": {
      "jaws": [ [ "SHIFT_TAB" ] ],
      "nvda": [ [ "SHIFT_TAB" ] ],
      "voiceover_macos": [
        [
          "CTRL_OPT_LEFT,CTRL_OPT_LEFT"
        ],
        [ "SHIFT_CTRL_OPT_CMD_J" ],
        [ "SHIFT_TAB" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBannerAndHideBottomLink.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 112`] = `
"{
  "task": "navigate backwards to a button inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark, and hides the last link inside the landmark region",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'Show Headings' button.",
  "setupTestPage": "setFocusAfterBannerAndHideBottomLink",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'button' is conveyed"
    ],
    [
      "1",
      "Name 'Show Headings' is conveyed"
    ],
    [
      "1",
      "Button description is conveyed as: 'Visually outline the landmarks and/or headings on the page'"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 113`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to an image inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 114`] = `
"{
  "info": {
    "testId": 19,
    "task": "navigate forwards to an image inside a banner landmark",
    "title": "Navigate forwards to an image inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "G",
      "keystroke": "G",
      "keypresses": [
        {
          "id": "G",
          "keystroke": "G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 115`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to an image inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-navigate-forwards-to-an-image-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 116`] = `
"{
  "info": {
    "testId": 19,
    "task": "navigate forwards to an image inside a banner landmark",
    "title": "Navigate forwards to an image inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "G",
      "keystroke": "G",
      "keypresses": [
        {
          "id": "G",
          "keystroke": "G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 117`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to an image inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to an image inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "G" ] ],
      "nvda": [ [ "G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_G" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 118`] = `
"{
  "task": "navigate forwards to an image inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 119`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to an image inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-20-navigate-forwards-to-an-image-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-20-navigate-forwards-to-an-image-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 120`] = `
"{
  "info": {
    "testId": 20,
    "task": "navigate forwards to an image inside a banner landmark",
    "title": "Navigate forwards to an image inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_CMD_G",
      "keystroke": "Control+Option+Command+G",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_G",
          "keystroke": "Control+Option+Command+G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 121`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to an image inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to an image inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "G" ] ],
      "nvda": [ [ "G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_G" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 122`] = `
"{
  "task": "navigate forwards to an image inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 123`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to an image inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 124`] = `
"{
  "info": {
    "testId": 21,
    "task": "navigate backwards to an image inside a banner landmark",
    "title": "Navigate backwards to an image inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "SHIFT_G",
      "keystroke": "Shift+G",
      "keypresses": [
        {
          "id": "SHIFT_G",
          "keystroke": "Shift+G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 125`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to an image inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-navigate-backwards-to-an-image-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 126`] = `
"{
  "info": {
    "testId": 21,
    "task": "navigate backwards to an image inside a banner landmark",
    "title": "Navigate backwards to an image inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "SHIFT_G",
      "keystroke": "Shift+G",
      "keypresses": [
        {
          "id": "SHIFT_G",
          "keystroke": "Shift+G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 127`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to an image inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to an image inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "SHIFT_G" ] ],
      "nvda": [ [ "SHIFT_G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_G" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 128`] = `
"{
  "task": "navigate backwards to an image inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 129`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to an image inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-22-navigate-backwards-to-an-image-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-22-navigate-backwards-to-an-image-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 130`] = `
"{
  "info": {
    "testId": 22,
    "task": "navigate backwards to an image inside a banner landmark",
    "title": "Navigate backwards to an image inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "SHIFT_CTRL_OPT_CMD_G",
      "keystroke": "Shift+Control+Option+Command+G",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_G",
          "keystroke": "Shift+Control+Option+Command+G"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'image' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'W3C Logo' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 131`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to an image inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to an image inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to an image inside a banner landmark": {
    "reading": {
      "jaws": [ [ "SHIFT_G" ] ],
      "nvda": [ [ "SHIFT_G" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_G" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 132`] = `
"{
  "task": "navigate backwards to an image inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'W3C Logo' image.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'image' is conveyed"
    ],
    [
      "1",
      "Name 'W3C Logo' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 133`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a heading inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 134`] = `
"{
  "info": {
    "testId": 23,
    "task": "navigate forwards to a heading inside a banner landmark",
    "title": "Navigate forwards to a heading inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "H",
      "keystroke": "H",
      "keypresses": [
        {
          "id": "H",
          "keystroke": "H"
        }
      ]
    },
    {
      "id": "ONE",
      "keystroke": "1",
      "keypresses": [
        {
          "id": "ONE",
          "keystroke": "1"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 135`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a heading inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-23-navigate-forwards-to-a-heading-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 136`] = `
"{
  "info": {
    "testId": 23,
    "task": "navigate forwards to a heading inside a banner landmark",
    "title": "Navigate forwards to a heading inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "H",
      "keystroke": "H",
      "keypresses": [
        {
          "id": "H",
          "keystroke": "H"
        }
      ]
    },
    {
      "id": "ONE",
      "keystroke": "1",
      "keypresses": [
        {
          "id": "ONE",
          "keystroke": "1"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 137`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a heading inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a heading inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [ [ "H" ], [ "ONE" ] ],
      "nvda": [ [ "H" ], [ "ONE" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_H" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 138`] = `
"{
  "task": "navigate forwards to a heading inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 139`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a heading inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-24-navigate-forwards-to-a-heading-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-24-navigate-forwards-to-a-heading-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 140`] = `
"{
  "info": {
    "testId": 24,
    "task": "navigate forwards to a heading inside a banner landmark",
    "title": "Navigate forwards to a heading inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusBeforeBanner.html",
    "setupScript": {
      "name": "setFocusBeforeBanner",
      "description": "sets focus on a link before the banner landmark",
      "source": "// sets focus on a link before the banner landmark\\ntestPageDocument.getElementById('beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeBanner.module.js",
      "jsonpPath": "scripts/setFocusBeforeBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With focus on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "CTRL_OPT_CMD_H",
      "keystroke": "Control+Option+Command+H",
      "keypresses": [
        {
          "id": "CTRL_OPT_CMD_H",
          "keystroke": "Control+Option+Command+H"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 141`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a heading inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusBeforeBanner: function(testPageDocument){
			// sets focus on a link before the banner landmark
			testPageDocument.getElementById('beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate forwards to a heading inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate forwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [ [ "H" ], [ "ONE" ] ],
      "nvda": [ [ "H" ], [ "ONE" ] ]
    },
    "interaction": {
      "voiceover_macos": [ [ "CTRL_OPT_CMD_H" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusBeforeBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 142`] = `
"{
  "task": "navigate forwards to a heading inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate forwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusBeforeBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 143`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a heading inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 144`] = `
"{
  "info": {
    "testId": 25,
    "task": "navigate backwards to a heading inside a banner landmark",
    "title": "Navigate backwards to a heading inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "jaws",
      "raw": "JAWS",
      "name": "JAWS"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Verify the Virtual Cursor is active by pressing Alt+Delete. If it is not, exit Forms Mode to activate the Virtual Cursor by pressing Escape."
  },
  "commands": [
    {
      "id": "SHIFT_H",
      "keystroke": "Shift+H",
      "keypresses": [
        {
          "id": "SHIFT_H",
          "keystroke": "Shift+H"
        }
      ]
    },
    {
      "id": "SHIFT_ONE",
      "keystroke": "Shift+1",
      "keypresses": [
        {
          "id": "SHIFT_ONE",
          "keystroke": "Shift+1"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 145`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a heading inside a banner landmark in reading mode</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-25-navigate-backwards-to-a-heading-inside-a-banner-landmark-reading-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 146`] = `
"{
  "info": {
    "testId": 25,
    "task": "navigate backwards to a heading inside a banner landmark",
    "title": "Navigate backwards to a heading inside a banner landmark in reading mode",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "nvda",
      "raw": "NVDA",
      "name": "NVDA"
    },
    "mode": "reading",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Ensure NVDA is in browse mode by pressing Escape. Note: This command has no effect if NVDA is already in browse mode."
  },
  "commands": [
    {
      "id": "SHIFT_H",
      "keystroke": "Shift+H",
      "keypresses": [
        {
          "id": "SHIFT_H",
          "keystroke": "Shift+H"
        }
      ]
    },
    {
      "id": "SHIFT_ONE",
      "keystroke": "Shift+1",
      "keypresses": [
        {
          "id": "SHIFT_ONE",
          "keystroke": "Shift+1"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 147`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a heading inside a banner landmark in reading mode</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a heading inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ],
      "nvda": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_H" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 148`] = `
"{
  "task": "navigate backwards to a heading inside a banner landmark",
  "mode": "reading",
  "applies_to": [
    "jaws",
    "nvda"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With the reading cursor on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 149`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a heading inside a banner landmark</title>
    <link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
    <link rel="help" href="https://w3c.github.io/aria/#banner">
    <link rel="preload" href="test-26-navigate-backwards-to-a-heading-inside-a-banner-landmark-interaction-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-26-navigate-backwards-to-a-heading-inside-a-banner-landmark-interaction-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 150`] = `
"{
  "info": {
    "testId": 26,
    "task": "navigate backwards to a heading inside a banner landmark",
    "title": "Navigate backwards to a heading inside a banner landmark",
    "references": [
      {
        "refId": "example",
        "value": "https://w3c.github.io/aria-practices/examples/landmarks/banner.html"
      },
      {
        "refId": "banner",
        "value": "https://w3c.github.io/aria/#banner"
      }
    ]
  },
  "target": {
    "at": {
      "key": "voiceover_macos",
      "raw": "VOICEOVER_MACOS",
      "name": "VoiceOver for macOS"
    },
    "mode": "interaction",
    "referencePage": "reference/2021-10-24_135455/banner.setFocusAfterBanner.html",
    "setupScript": {
      "name": "setFocusAfterBanner",
      "description": "sets focus on a link after the banner landmark",
      "source": "// sets focus on a link after the banner landmark\\ntestPageDocument.getElementById('afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterBanner.module.js",
      "jsonpPath": "scripts/setFocusAfterBanner.jsonp.js"
    }
  },
  "instructions": {
    "user": [
      "With focus on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading."
    ],
    "raw": "With focus on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
    "mode": "Toggle Quick Nav OFF by pressing the Left Arrow and Right Arrow keys at the same time."
  },
  "commands": [
    {
      "id": "SHIFT_CTRL_OPT_CMD_H",
      "keystroke": "Shift+Control+Option+Command+H",
      "keypresses": [
        {
          "id": "SHIFT_CTRL_OPT_CMD_H",
          "keystroke": "Shift+Control+Option+Command+H"
        }
      ]
    }
  ],
  "assertions": [
    {
      "priority": 1,
      "expectation": "Role 'banner' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Role 'heading' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Heading level '1' is conveyed"
    },
    {
      "priority": 1,
      "expectation": "Name 'ARIA Landmarks Example' is conveyed"
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 151`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a heading inside a banner landmark</title>
<link rel="help" href="https://w3c.github.io/aria-practices/examples/landmarks/banner.html">
<link rel="help" href="https://w3c.github.io/aria/#banner">

<script>
  let scripts = {
		setFocusAfterBanner: function(testPageDocument){
			// sets focus on a link after the banner landmark
			testPageDocument.getElementById('afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    })
  .then(supportJson => {
    const testJson = {
  "task": "navigate backwards to a heading inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
};
    const commandJson = {
  "navigate backwards to a heading inside a banner landmark": {
    "reading": {
      "jaws": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ],
      "nvda": [
        [ "SHIFT_H" ],
        [ "SHIFT_ONE" ]
      ]
    },
    "interaction": {
      "voiceover_macos": [ [ "SHIFT_CTRL_OPT_CMD_H" ] ]
    }
  }
};
    initialize(supportJson, commandJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2021-10-24_135455/banner.setFocusAfterBanner.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 152`] = `
"{
  "task": "navigate backwards to a heading inside a banner landmark",
  "mode": "interaction",
  "applies_to": [
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the banner landmark",
  "specific_user_instruction": "With focus on the 'Navigate backwards from here' link, navigate to the 'ARIA Landmarks Example' heading.",
  "setupTestPage": "setFocusAfterBanner",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    [
      "1",
      "Role 'banner' is conveyed"
    ],
    [
      "1",
      "Role 'heading' is conveyed"
    ],
    [
      "1",
      "Heading level '1' is conveyed"
    ],
    [
      "1",
      "Name 'ARIA Landmarks Example' is conveyed"
    ]
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 153`] = `
"{
  "navForwardsToButton": {
    "virtualCursor": {
      "jaws": [
        [ "down|1" ],
        [ "b|1.1" ],
        [ "f|1.2" ],
        [ "tab|1.3" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "tab|3" ] ] },
    "browseMode": {
      "nvda": [
        [ "down|1" ],
        [ "b|1.1" ],
        [ "f|1.2" ],
        [ "tab|1.3" ]
      ]
    },
    "focusMode": { "nvda": [ [ "tab|3" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+right|5" ],
        [ "tab|5.1" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "j|5.2" ], [ "b|5.3" ] ]
    }
  },
  "navBackToButton": {
    "virtualCursor": {
      "jaws": [
        [ "up|2" ],
        [ "shift+b|2.1" ],
        [ "shift+f|2.2" ],
        [ "shift+tab|2.3" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "shift+tab|4" ] ] },
    "browseMode": {
      "nvda": [
        [ "up|2" ],
        [ "shift+b|2.1" ],
        [ "shift+f|2.2" ],
        [ "shift+tab|2.3" ]
      ]
    },
    "focusMode": { "nvda": [ [ "shift+tab|4" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+left|6" ],
        [ "shift+tab|6.1" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [
        [ "shift+j|6.2" ],
        [ "shift+b|6.3" ]
      ]
    }
  },
  "reqInfoAboutButton": {
    "virtualCursor": {
      "jaws": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+f3|9" ],
        [ "ctrl+opt+f4|9.1" ]
      ]
    }
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 154`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <title>Index of Assistive Technology Test Files</title>
  <style>
    table {
      display: table;
      border-collapse: collapse;
      border-spacing: 2px;
      border-color: rgb(128,128,128);
    }

    thead {
      display: table-row-group;
      vertical-align: middle;
      border-bottom: black solid 2px;
    }

    tbody {
      display: table-row-group;
      vertical-align: middle;
      border-color: rgb(128,128,128);
    }

    tr:nth-child(even) {background: #DDD}
    tr:nth-child(odd) {background: #FFF}

    tr {
      display: table-row;
      vertical-align: inherit;
      border-color: rgb(128,128,128);
    }

    td {
      padding: 3px;
      display: table-cell;
    }

    td.test {
      text-align: center;
    }

    td.none {
      color: #333;
    }

    th {
      padding: 3px;
      font-weight: bold;
      display: table-cell;
    }
  </style>
</head>
<body>
 <main>
  <h1>Index of Assistive Technology Test Files</h1>
  <p>This is useful for viewing the local files on a local web server.</p>
  <table>
    <thead>
      <tr>
        <th>Sequence</th>
        <th>Task ID</th>
        <th>Testing Task</th>
        <th>JAWS</th>
<th>NVDA</th>
<th>VoiceOver for macOS</th>

        <th>Setup Script Reference</th>
      </tr>
    </thead>
    <tbody>
<tr><td>1</td><td>navForwardsToButton</td><td scope="row">Navigate forwards to a button</td><td class="test"><a href="test-05-navForwardsToButton.html?at=jaws" aria-label="JAWS test for task navForwardsToButton">JAWS</a></td><td class="test"><a href="test-05-navForwardsToButton.html?at=nvda" aria-label="NVDA test for task navForwardsToButton">NVDA</a></td><td class="test"><a href="test-05-navForwardsToButton.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task navForwardsToButton">VoiceOver for macOS</a></td><td>setFocusBeforeButton</td></tr>
<tr><td>2</td><td>navBackToButton</td><td scope="row">Navigate backwards to a button</td><td class="test"><a href="test-06-navBackToButton.html?at=jaws" aria-label="JAWS test for task navBackToButton">JAWS</a></td><td class="test"><a href="test-06-navBackToButton.html?at=nvda" aria-label="NVDA test for task navBackToButton">NVDA</a></td><td class="test"><a href="test-06-navBackToButton.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task navBackToButton">VoiceOver for macOS</a></td><td>setFocusAfterButton</td></tr>
<tr><td>3</td><td>reqInfoAboutButton</td><td scope="row">Request information about a button</td><td class="test"><a href="test-09-reqInfoAboutButton.html?at=jaws" aria-label="JAWS test for task reqInfoAboutButton">JAWS</a></td><td class="test"><a href="test-09-reqInfoAboutButton.html?at=nvda" aria-label="NVDA test for task reqInfoAboutButton">NVDA</a></td><td class="test"><a href="test-09-reqInfoAboutButton.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task reqInfoAboutButton">VoiceOver for macOS</a></td><td>setFocusOnButton</td></tr>

    </tbody>
  </table>
  </main>
</body>
"
`;

exports[`all test format versions runs createAllTests successfully 155`] = `
"window[document.currentScript.getAttribute("jsonpFunction") || "scriptsJsonpLoaded"]({
  setFocusAfterButton(testPageDocument) {
    // sets focus on a link after the button
    testPageDocument.querySelector('#afterlink').focus();
  },
  setFocusBeforeButton(testPageDocument) {
    // sets focus on a link before the button
    testPageDocument.querySelector('#beforelink').focus();
  },
  setFocusOnButton(testPageDocument) {
    // sets focus on the button
    testPageDocument.querySelector('#action').focus();
  }
});
"
`;

exports[`all test format versions runs createAllTests successfully 156`] = `
"export function setFocusAfterButton(testPageDocument) {
  // sets focus on a link after the button
  testPageDocument.querySelector('#afterlink').focus();
}

export function setFocusBeforeButton(testPageDocument) {
  // sets focus on a link before the button
  testPageDocument.querySelector('#beforelink').focus();
}

export function setFocusOnButton(testPageDocument) {
  // sets focus on the button
  testPageDocument.querySelector('#action').focus();
}
"
`;

exports[`all test format versions runs createAllTests successfully 157`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-05-navForwardsToButton-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToButton-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 158`] = `
"{
  "info": {
    "testId": "navForwardsToButton",
    "title": "Navigate forwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusBeforeButton.html",
    "setupScript": {
      "script": "setFocusBeforeButton",
      "scriptDescription": "sets focus on a link before the button",
      "name": "setFocusBeforeButton",
      "source": "// sets focus on a link before the button\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeButton.module.js",
      "jsonpPath": "scripts/setFocusBeforeButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 1,
      "settings": "virtualCursor"
    },
    {
      "id": "b",
      "keypresses": [
        {
          "id": "b",
          "keystroke": "b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "b",
      "presentationNumber": 1.1,
      "settings": "virtualCursor"
    },
    {
      "id": "f",
      "keypresses": [
        {
          "id": "f",
          "keystroke": "f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "f",
      "presentationNumber": 1.2,
      "settings": "virtualCursor"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 1.3,
      "settings": "virtualCursor"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 3,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 159`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-05-navForwardsToButton-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToButton-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 160`] = `
"{
  "info": {
    "testId": "navForwardsToButton",
    "title": "Navigate forwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusBeforeButton.html",
    "setupScript": {
      "script": "setFocusBeforeButton",
      "scriptDescription": "sets focus on a link before the button",
      "name": "setFocusBeforeButton",
      "source": "// sets focus on a link before the button\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeButton.module.js",
      "jsonpPath": "scripts/setFocusBeforeButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 1,
      "settings": "browseMode"
    },
    {
      "id": "b",
      "keypresses": [
        {
          "id": "b",
          "keystroke": "b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "b",
      "presentationNumber": 1.1,
      "settings": "browseMode"
    },
    {
      "id": "f",
      "keypresses": [
        {
          "id": "f",
          "keystroke": "f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "f",
      "presentationNumber": 1.2,
      "settings": "browseMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 1.3,
      "settings": "browseMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 3,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 161`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-05-navForwardsToButton-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToButton-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 162`] = `
"{
  "info": {
    "testId": "navForwardsToButton",
    "title": "Navigate forwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode_singleQuickKeyNavOn",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusBeforeButton.html",
    "setupScript": {
      "script": "setFocusBeforeButton",
      "scriptDescription": "sets focus on a link before the button",
      "name": "setFocusBeforeButton",
      "source": "// sets focus on a link before the button\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeButton.module.js",
      "jsonpPath": "scripts/setFocusBeforeButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ],
      "singleQuickKeyNavOn": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
        "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+right",
      "keypresses": [
        {
          "id": "ctrl+opt+right",
          "keystroke": "Control+Option+Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Right Arrow",
      "presentationNumber": 5,
      "settings": "defaultMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 5.1,
      "settings": "defaultMode"
    },
    {
      "id": "j",
      "keypresses": [
        {
          "id": "j",
          "keystroke": "j"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "j",
      "presentationNumber": 5.2,
      "settings": "singleQuickKeyNavOn"
    },
    {
      "id": "b",
      "keypresses": [
        {
          "id": "b",
          "keystroke": "b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "b",
      "presentationNumber": 5.3,
      "settings": "singleQuickKeyNavOn"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 163`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a button</title>

<script>
  let scripts = {
		setFocusBeforeButton: function(testPageDocument){
			// sets focus on a link before the button
			testPageDocument.querySelector('#beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "navForwardsToButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the button",
  "specific_user_instruction": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
  "setupTestPage": "setFocusBeforeButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navForwardsToButton",
        "command": "down",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "f",
        "settings": "virtualCursor",
        "presentationNumber": 1.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "virtualCursor",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "pcCursor",
        "presentationNumber": 3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navForwardsToButton",
        "command": "down",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "f",
        "settings": "browseMode",
        "presentationNumber": 1.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "browseMode",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "focusMode",
        "presentationNumber": 3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navForwardsToButton",
        "command": "ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 5,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "defaultMode",
        "presentationNumber": 5.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "j ",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.3,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "navForwardsToButton": {
    "virtualCursor": {
      "jaws": [
        [ "down|1" ],
        [ "b|1.1" ],
        [ "f|1.2" ],
        [ "tab|1.3" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "tab|3" ] ] },
    "browseMode": {
      "nvda": [
        [ "down|1" ],
        [ "b|1.1" ],
        [ "f|1.2" ],
        [ "tab|1.3" ]
      ]
    },
    "focusMode": { "nvda": [ [ "tab|3" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+right|5" ],
        [ "tab|5.1" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "j|5.2" ], [ "b|5.3" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-8_124112/button.setFocusBeforeButton.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 164`] = `
"{
  "task": "navForwardsToButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the button",
  "specific_user_instruction": "Starting at the 'Navigate forwards from here' link, navigate to the 'Print Page' button.",
  "setupTestPage": "setFocusBeforeButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navForwardsToButton",
        "command": "down",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "f",
        "settings": "virtualCursor",
        "presentationNumber": 1.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "virtualCursor",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "pcCursor",
        "presentationNumber": 3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navForwardsToButton",
        "command": "down",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "f",
        "settings": "browseMode",
        "presentationNumber": 1.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "browseMode",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "focusMode",
        "presentationNumber": 3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navForwardsToButton",
        "command": "ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 5,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "tab",
        "settings": "defaultMode",
        "presentationNumber": 5.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "j ",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToButton",
        "command": "b",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.3,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 165`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-06-navBackToButton-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToButton-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 166`] = `
"{
  "info": {
    "testId": "navBackToButton",
    "title": "Navigate backwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusAfterButton.html",
    "setupScript": {
      "script": "setFocusAfterButton",
      "scriptDescription": "sets focus on a link after the button",
      "name": "setFocusAfterButton",
      "source": "// sets focus on a link after the button\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterButton.module.js",
      "jsonpPath": "scripts/setFocusAfterButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 2,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+b",
      "keypresses": [
        {
          "id": "shift+b",
          "keystroke": "Shift+b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+b",
      "presentationNumber": 2.1,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+f",
      "keypresses": [
        {
          "id": "shift+f",
          "keystroke": "Shift+f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+f",
      "presentationNumber": 2.2,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.3,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 4,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 167`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-06-navBackToButton-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToButton-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 168`] = `
"{
  "info": {
    "testId": "navBackToButton",
    "title": "Navigate backwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusAfterButton.html",
    "setupScript": {
      "script": "setFocusAfterButton",
      "scriptDescription": "sets focus on a link after the button",
      "name": "setFocusAfterButton",
      "source": "// sets focus on a link after the button\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterButton.module.js",
      "jsonpPath": "scripts/setFocusAfterButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 2,
      "settings": "browseMode"
    },
    {
      "id": "shift+b",
      "keypresses": [
        {
          "id": "shift+b",
          "keystroke": "Shift+b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+b",
      "presentationNumber": 2.1,
      "settings": "browseMode"
    },
    {
      "id": "shift+f",
      "keypresses": [
        {
          "id": "shift+f",
          "keystroke": "Shift+f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+f",
      "presentationNumber": 2.2,
      "settings": "browseMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.3,
      "settings": "browseMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 4,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 169`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-06-navBackToButton-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToButton-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 170`] = `
"{
  "info": {
    "testId": "navBackToButton",
    "title": "Navigate backwards to a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode_singleQuickKeyNavOn",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusAfterButton.html",
    "setupScript": {
      "script": "setFocusAfterButton",
      "scriptDescription": "sets focus on a link after the button",
      "name": "setFocusAfterButton",
      "source": "// sets focus on a link after the button\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterButton.module.js",
      "jsonpPath": "scripts/setFocusAfterButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ],
      "singleQuickKeyNavOn": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
        "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+left",
      "keypresses": [
        {
          "id": "ctrl+opt+left",
          "keystroke": "Control+Option+Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Left Arrow",
      "presentationNumber": 6,
      "settings": "defaultMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 6.1,
      "settings": "defaultMode"
    },
    {
      "id": "shift+j",
      "keypresses": [
        {
          "id": "shift+j",
          "keystroke": "Shift+j"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+j",
      "presentationNumber": 6.2,
      "settings": "singleQuickKeyNavOn"
    },
    {
      "id": "shift+b",
      "keypresses": [
        {
          "id": "shift+b",
          "keystroke": "Shift+b"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+b",
      "presentationNumber": 6.3,
      "settings": "singleQuickKeyNavOn"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 171`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a button</title>

<script>
  let scripts = {
		setFocusAfterButton: function(testPageDocument){
			// sets focus on a link after the button
			testPageDocument.querySelector('#afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "navBackToButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the button",
  "specific_user_instruction": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
  "setupTestPage": "setFocusAfterButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navBackToButton",
        "command": "up",
        "settings": "virtualCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "virtualCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+f",
        "settings": "virtualCursor",
        "presentationNumber": 2.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "virtualCursor",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "pcCursor",
        "presentationNumber": 4,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navBackToButton",
        "command": "up",
        "settings": "browseMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "browseMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+f",
        "settings": "browseMode",
        "presentationNumber": 2.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "browseMode",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "focusMode",
        "presentationNumber": 4,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navBackToButton",
        "command": "ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 6,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "defaultMode",
        "presentationNumber": 6.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.3,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "navBackToButton": {
    "virtualCursor": {
      "jaws": [
        [ "up|2" ],
        [ "shift+b|2.1" ],
        [ "shift+f|2.2" ],
        [ "shift+tab|2.3" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "shift+tab|4" ] ] },
    "browseMode": {
      "nvda": [
        [ "up|2" ],
        [ "shift+b|2.1" ],
        [ "shift+f|2.2" ],
        [ "shift+tab|2.3" ]
      ]
    },
    "focusMode": { "nvda": [ [ "shift+tab|4" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+left|6" ],
        [ "shift+tab|6.1" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [
        [ "shift+j|6.2" ],
        [ "shift+b|6.3" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-8_124112/button.setFocusAfterButton.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 172`] = `
"{
  "task": "navBackToButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the button",
  "specific_user_instruction": "Starting at the 'Navigate backwards from here' link, navigate to the 'Print Page' button.",
  "setupTestPage": "setFocusAfterButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navBackToButton",
        "command": "up",
        "settings": "virtualCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "virtualCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+f",
        "settings": "virtualCursor",
        "presentationNumber": 2.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "virtualCursor",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "pcCursor",
        "presentationNumber": 4,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navBackToButton",
        "command": "up",
        "settings": "browseMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "browseMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+f",
        "settings": "browseMode",
        "presentationNumber": 2.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "browseMode",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "focusMode",
        "presentationNumber": 4,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navBackToButton",
        "command": "ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 6,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+tab",
        "settings": "defaultMode",
        "presentationNumber": 6.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToButton",
        "command": "shift+b",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.3,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 173`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-09-reqInfoAboutButton-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutButton-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 174`] = `
"{
  "info": {
    "testId": "reqInfoAboutButton",
    "title": "Request information about a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the button\\ntestPageDocument.querySelector('#action').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Print Page' button, read information about the button.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 7,
      "settings": "virtualCursor"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 7.1,
      "settings": "virtualCursor"
    },
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 8,
      "settings": "pcCursor"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 8.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 175`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-09-reqInfoAboutButton-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutButton-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 176`] = `
"{
  "info": {
    "testId": "reqInfoAboutButton",
    "title": "Request information about a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the button\\ntestPageDocument.querySelector('#action').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Print Page' button, read information about the button.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 7,
      "settings": "browseMode"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 7.1,
      "settings": "browseMode"
    },
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 8,
      "settings": "focusMode"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 8.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 177`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a button</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/">
    <link rel="preload" href="test-09-reqInfoAboutButton-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutButton-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 178`] = `
"{
  "info": {
    "testId": "reqInfoAboutButton",
    "title": "Request information about a button",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/button/examples/button/",
        "linkText": "APG Example: Button"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-8_124112/button.setFocusOnButton.html",
    "setupScript": {
      "script": "setFocusOnButton",
      "scriptDescription": "sets focus on the button",
      "name": "setFocusOnButton",
      "source": "// sets focus on the button\\ntestPageDocument.querySelector('#action').focus();\\n",
      "modulePath": "scripts/setFocusOnButton.module.js",
      "jsonpPath": "scripts/setFocusOnButton.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Print Page' button, read information about the button.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+f3",
      "keypresses": [
        {
          "id": "ctrl+opt+f3",
          "keystroke": "Control+Option+F3"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+F3",
      "presentationNumber": 9,
      "settings": "defaultMode"
    },
    {
      "id": "ctrl+opt+f4",
      "keypresses": [
        {
          "id": "ctrl+opt+f4",
          "keystroke": "Control+Option+F4"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+F4",
      "presentationNumber": 9.1,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 179`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Request information about a button</title>

<script>
  let scripts = {
		setFocusOnButton: function(testPageDocument){
			// sets focus on the button
			testPageDocument.querySelector('#action').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "reqInfoAboutButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the button",
  "specific_user_instruction": "Starting at the 'Print Page' button, read information about the button.",
  "setupTestPage": "setFocusOnButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "virtualCursor",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "virtualCursor",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "pcCursor",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "pcCursor",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "browseMode",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "browseMode",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "focusMode",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "focusMode",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ctrl+opt+f3",
        "settings": "defaultMode",
        "presentationNumber": 9,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ctrl+opt+f4",
        "settings": "defaultMode",
        "presentationNumber": 9.1,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "reqInfoAboutButton": {
    "virtualCursor": {
      "jaws": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+f3|9" ],
        [ "ctrl+opt+f4|9.1" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-8_124112/button.setFocusOnButton.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 180`] = `
"{
  "task": "reqInfoAboutButton",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the button",
  "specific_user_instruction": "Starting at the 'Print Page' button, read information about the button.",
  "setupTestPage": "setFocusOnButton",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleButton",
      "priority": 1,
      "assertionStatement": "Role 'button' is conveyed",
      "assertionPhrase": "convey role 'button'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "namePrintPage",
      "priority": 1,
      "assertionStatement": "Name 'Print Page' is conveyed",
      "assertionPhrase": "convey name 'Print Page'",
      "refIds": "",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "virtualCursor",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "virtualCursor",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "pcCursor",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "pcCursor",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "browseMode",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "browseMode",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+tab",
        "settings": "focusMode",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ins+up",
        "settings": "focusMode",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "reqInfoAboutButton",
        "command": "ctrl+opt+f3",
        "settings": "defaultMode",
        "presentationNumber": 9,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutButton",
        "command": "ctrl+opt+f4",
        "settings": "defaultMode",
        "presentationNumber": 9.1,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 181`] = `
"{
  "navForwardsToSlider": {
    "virtualCursor": {
      "jaws": [
        [ "down down|1" ],
        [ "f|1.1" ],
        [ "tab|1.2" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "tab|1.3" ] ] },
    "browseMode": {
      "nvda": [
        [ "down down|1" ],
        [ "f|1.1" ],
        [ "tab|1.2" ]
      ]
    },
    "focusMode": { "nvda": [ [ "tab|1.3" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+right ctrl+opt+right|5"
        ],
        [ "tab|5.2" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "j|5.1" ] ]
    }
  },
  "navBackToSlider": {
    "virtualCursor": {
      "jaws": [
        [ "up|2" ],
        [ "shift+f|2.1" ],
        [ "shift+tab|2.2" ]
      ]
    },
    "pcCursor": {
      "jaws": [ [ "shift+tab|2.3" ] ]
    },
    "browseMode": {
      "nvda": [
        [ "up|2" ],
        [ "shift+f|2.1" ],
        [ "shift+tab|2.2" ]
      ]
    },
    "focusMode": {
      "nvda": [ [ "shift+tab|2.3" ] ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+left ctrl+opt+left|6"
        ],
        [ "shift+tab|6.2" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "shift+j|6.1" ] ]
    }
  },
  "reqInfoAboutSlider": {
    "virtualCursor": {
      "jaws": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+f3|9" ],
        [ "ctrl+opt+f4|9.1" ]
      ]
    }
  },
  "incrementSliderByOneStep": {
    "pcCursor": {
      "jaws": [
        [ "right|10" ],
        [ "up|10.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "right|10" ],
        [ "up|10.1" ]
      ]
    },
    "quickNavOff": {
      "voiceover_macos": [
        [ "right|11" ],
        [ "up|11.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+shift+down ctrl+opt+up|11.2"
        ],
        [
          "ctrl+opt+shift+down ctrl+opt+right|11.3"
        ]
      ]
    }
  },
  "decrementSliderByOneStep": {
    "pcCursor": {
      "jaws": [
        [ "left|12" ],
        [ "down|12.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "left|12" ],
        [ "down|12.1" ]
      ]
    },
    "quickNavOff": {
      "voiceover_macos": [
        [ "left|13" ],
        [ "down|13.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+shift+down ctrl+opt+down|13.2"
        ],
        [
          "ctrl+opt+shift+down ctrl+opt+left|13.3"
        ]
      ]
    }
  },
  "incrementSliderByTenSteps": {
    "pcCursor": { "jaws": [ [ "pageUp|14" ] ] },
    "focusMode": { "nvda": [ [ "pageUp|14" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "pageUp|15" ] ]
    }
  },
  "decrementSliderByTenSteps": {
    "pcCursor": { "jaws": [ [ "pageDown|16" ] ] },
    "focusMode": { "nvda": [ [ "pageDown|16" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "pageDown|17" ] ]
    }
  },
  "decrementSliderToMinimumValue": {
    "pcCursor": { "jaws": [ [ "home|18" ] ] },
    "focusMode": { "nvda": [ [ "home|18" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "home|19" ] ]
    }
  },
  "incrementSliderToMaximumValue": {
    "pcCursor": { "jaws": [ [ "end|20" ] ] },
    "focusMode": { "nvda": [ [ "end|20" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "end|21" ] ]
    }
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 182`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <title>Index of Assistive Technology Test Files</title>
  <style>
    table {
      display: table;
      border-collapse: collapse;
      border-spacing: 2px;
      border-color: rgb(128,128,128);
    }

    thead {
      display: table-row-group;
      vertical-align: middle;
      border-bottom: black solid 2px;
    }

    tbody {
      display: table-row-group;
      vertical-align: middle;
      border-color: rgb(128,128,128);
    }

    tr:nth-child(even) {background: #DDD}
    tr:nth-child(odd) {background: #FFF}

    tr {
      display: table-row;
      vertical-align: inherit;
      border-color: rgb(128,128,128);
    }

    td {
      padding: 3px;
      display: table-cell;
    }

    td.test {
      text-align: center;
    }

    td.none {
      color: #333;
    }

    th {
      padding: 3px;
      font-weight: bold;
      display: table-cell;
    }
  </style>
</head>
<body>
 <main>
  <h1>Index of Assistive Technology Test Files</h1>
  <p>This is useful for viewing the local files on a local web server.</p>
  <table>
    <thead>
      <tr>
        <th>Sequence</th>
        <th>Task ID</th>
        <th>Testing Task</th>
        <th>JAWS</th>
<th>NVDA</th>
<th>VoiceOver for macOS</th>

        <th>Setup Script Reference</th>
      </tr>
    </thead>
    <tbody>
<tr><td>1</td><td>navForwardsToSlider</td><td scope="row">Navigate forwards to a slider</td><td class="test"><a href="test-05-navForwardsToSlider.html?at=jaws" aria-label="JAWS test for task navForwardsToSlider">JAWS</a></td><td class="test"><a href="test-05-navForwardsToSlider.html?at=nvda" aria-label="NVDA test for task navForwardsToSlider">NVDA</a></td><td class="test"><a href="test-05-navForwardsToSlider.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task navForwardsToSlider">VoiceOver for macOS</a></td><td>setFocusBeforeRedSlider</td></tr>
<tr><td>2</td><td>navBackToSlider</td><td scope="row">Navigate backwards to a slider</td><td class="test"><a href="test-06-navBackToSlider.html?at=jaws" aria-label="JAWS test for task navBackToSlider">JAWS</a></td><td class="test"><a href="test-06-navBackToSlider.html?at=nvda" aria-label="NVDA test for task navBackToSlider">NVDA</a></td><td class="test"><a href="test-06-navBackToSlider.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task navBackToSlider">VoiceOver for macOS</a></td><td>setFocusAfterRedSlider</td></tr>
<tr><td>3</td><td>reqInfoAboutSlider</td><td scope="row">Request information about a slider</td><td class="test"><a href="test-09-reqInfoAboutSlider.html?at=jaws" aria-label="JAWS test for task reqInfoAboutSlider">JAWS</a></td><td class="test"><a href="test-09-reqInfoAboutSlider.html?at=nvda" aria-label="NVDA test for task reqInfoAboutSlider">NVDA</a></td><td class="test"><a href="test-09-reqInfoAboutSlider.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task reqInfoAboutSlider">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>4</td><td>incrementSliderByOneStep</td><td scope="row">Increment a slider by one step</td><td class="test"><a href="test-11-incrementSliderByOneStep.html?at=jaws" aria-label="JAWS test for task incrementSliderByOneStep">JAWS</a></td><td class="test"><a href="test-11-incrementSliderByOneStep.html?at=nvda" aria-label="NVDA test for task incrementSliderByOneStep">NVDA</a></td><td class="test"><a href="test-11-incrementSliderByOneStep.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task incrementSliderByOneStep">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>5</td><td>decrementSliderByOneStep</td><td scope="row">Decrement a slider by one step</td><td class="test"><a href="test-13-decrementSliderByOneStep.html?at=jaws" aria-label="JAWS test for task decrementSliderByOneStep">JAWS</a></td><td class="test"><a href="test-13-decrementSliderByOneStep.html?at=nvda" aria-label="NVDA test for task decrementSliderByOneStep">NVDA</a></td><td class="test"><a href="test-13-decrementSliderByOneStep.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task decrementSliderByOneStep">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>6</td><td>incrementSliderByTenSteps</td><td scope="row">Increment a slider by ten steps</td><td class="test"><a href="test-15-incrementSliderByTenSteps.html?at=jaws" aria-label="JAWS test for task incrementSliderByTenSteps">JAWS</a></td><td class="test"><a href="test-15-incrementSliderByTenSteps.html?at=nvda" aria-label="NVDA test for task incrementSliderByTenSteps">NVDA</a></td><td class="test"><a href="test-15-incrementSliderByTenSteps.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task incrementSliderByTenSteps">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>7</td><td>decrementSliderByTenSteps</td><td scope="row">Decrement a slider by ten steps</td><td class="test"><a href="test-17-decrementSliderByTenSteps.html?at=jaws" aria-label="JAWS test for task decrementSliderByTenSteps">JAWS</a></td><td class="test"><a href="test-17-decrementSliderByTenSteps.html?at=nvda" aria-label="NVDA test for task decrementSliderByTenSteps">NVDA</a></td><td class="test"><a href="test-17-decrementSliderByTenSteps.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task decrementSliderByTenSteps">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>8</td><td>decrementSliderToMinimumValue</td><td scope="row">Decrement a slider to the minimum value</td><td class="test"><a href="test-19-decrementSliderToMinimumValue.html?at=jaws" aria-label="JAWS test for task decrementSliderToMinimumValue">JAWS</a></td><td class="test"><a href="test-19-decrementSliderToMinimumValue.html?at=nvda" aria-label="NVDA test for task decrementSliderToMinimumValue">NVDA</a></td><td class="test"><a href="test-19-decrementSliderToMinimumValue.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task decrementSliderToMinimumValue">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>
<tr><td>9</td><td>incrementSliderToMaximumValue</td><td scope="row">Increment a slider to the maximum value</td><td class="test"><a href="test-21-incrementSliderToMaximumValue.html?at=jaws" aria-label="JAWS test for task incrementSliderToMaximumValue">JAWS</a></td><td class="test"><a href="test-21-incrementSliderToMaximumValue.html?at=nvda" aria-label="NVDA test for task incrementSliderToMaximumValue">NVDA</a></td><td class="test"><a href="test-21-incrementSliderToMaximumValue.html?at=voiceover_macos" aria-label="VoiceOver for macOS test for task incrementSliderToMaximumValue">VoiceOver for macOS</a></td><td>setFocusOnRedSlider</td></tr>

    </tbody>
  </table>
  </main>
</body>
"
`;

exports[`all test format versions runs createAllTests successfully 183`] = `
"window[document.currentScript.getAttribute("jsonpFunction") || "scriptsJsonpLoaded"]({
  setFocusAfterRedSlider(testPageDocument) {
    // sets focus on a link after the Red slider
    testPageDocument.querySelector('#afterlink').focus();
  },
  setFocusBeforeRedSlider(testPageDocument) {
    // sets focus on a link before the Red slider
    testPageDocument.querySelector('#beforelink').focus();
  },
  setFocusOnRedSlider(testPageDocument) {
    // sets focus on the 'Red' slider
    testPageDocument.querySelector('[role="slider"].red').focus();
  }
});
"
`;

exports[`all test format versions runs createAllTests successfully 184`] = `
"export function setFocusAfterRedSlider(testPageDocument) {
  // sets focus on a link after the Red slider
  testPageDocument.querySelector('#afterlink').focus();
}

export function setFocusBeforeRedSlider(testPageDocument) {
  // sets focus on a link before the Red slider
  testPageDocument.querySelector('#beforelink').focus();
}

export function setFocusOnRedSlider(testPageDocument) {
  // sets focus on the 'Red' slider
  testPageDocument.querySelector('[role="slider"].red').focus();
}
"
`;

exports[`all test format versions runs createAllTests successfully 185`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-05-navForwardsToSlider-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToSlider-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 186`] = `
"{
  "info": {
    "testId": "navForwardsToSlider",
    "title": "Navigate forwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusBeforeRedSlider.html",
    "setupScript": {
      "script": "setFocusBeforeRedSlider",
      "scriptDescription": "sets focus on a link before the Red slider",
      "name": "setFocusBeforeRedSlider",
      "source": "// sets focus on a link before the Red slider\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeRedSlider.module.js",
      "jsonpPath": "scripts/setFocusBeforeRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "down down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        },
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow then Down Arrow",
      "presentationNumber": 1,
      "settings": "virtualCursor"
    },
    {
      "id": "f",
      "keypresses": [
        {
          "id": "f",
          "keystroke": "f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "f",
      "presentationNumber": 1.1,
      "settings": "virtualCursor"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [
        {
          "priority": 2,
          "assertionId": "interactionModeEnabled"
        }
      ],
      "keystroke": "Tab",
      "presentationNumber": 1.2,
      "settings": "virtualCursor"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 1.3,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 187`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-05-navForwardsToSlider-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToSlider-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 188`] = `
"{
  "info": {
    "testId": "navForwardsToSlider",
    "title": "Navigate forwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusBeforeRedSlider.html",
    "setupScript": {
      "script": "setFocusBeforeRedSlider",
      "scriptDescription": "sets focus on a link before the Red slider",
      "name": "setFocusBeforeRedSlider",
      "source": "// sets focus on a link before the Red slider\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeRedSlider.module.js",
      "jsonpPath": "scripts/setFocusBeforeRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "down down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        },
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow then Down Arrow",
      "presentationNumber": 1,
      "settings": "browseMode"
    },
    {
      "id": "f",
      "keypresses": [
        {
          "id": "f",
          "keystroke": "f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "f",
      "presentationNumber": 1.1,
      "settings": "browseMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [
        {
          "priority": 2,
          "assertionId": "interactionModeEnabled"
        }
      ],
      "keystroke": "Tab",
      "presentationNumber": 1.2,
      "settings": "browseMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 1.3,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 189`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate forwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-05-navForwardsToSlider-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-05-navForwardsToSlider-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 190`] = `
"{
  "info": {
    "testId": "navForwardsToSlider",
    "title": "Navigate forwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 5
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode_singleQuickKeyNavOn",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusBeforeRedSlider.html",
    "setupScript": {
      "script": "setFocusBeforeRedSlider",
      "scriptDescription": "sets focus on a link before the Red slider",
      "name": "setFocusBeforeRedSlider",
      "source": "// sets focus on a link before the Red slider\\ntestPageDocument.querySelector('#beforelink').focus();\\n",
      "modulePath": "scripts/setFocusBeforeRedSlider.module.js",
      "jsonpPath": "scripts/setFocusBeforeRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ],
      "singleQuickKeyNavOn": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
        "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+right ctrl+opt+right",
      "keypresses": [
        {
          "id": "ctrl+opt+right",
          "keystroke": "Control+Option+Right Arrow"
        },
        {
          "id": "ctrl+opt+right",
          "keystroke": "Control+Option+Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Right Arrow then Control+Option+Right Arrow",
      "presentationNumber": 5,
      "settings": "defaultMode"
    },
    {
      "id": "tab",
      "keypresses": [
        {
          "id": "tab",
          "keystroke": "Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Tab",
      "presentationNumber": 5.2,
      "settings": "defaultMode"
    },
    {
      "id": "j",
      "keypresses": [
        {
          "id": "j",
          "keystroke": "j"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "j",
      "presentationNumber": 5.1,
      "settings": "singleQuickKeyNavOn"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 191`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate forwards to a slider</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#slider" title="slider ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby" title="aria-labelledby ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation" title="aria-orientation ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin" title="aria-valuemin ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax" title="aria-valuemax ARIA Specification">

<script>
  let scripts = {
		setFocusBeforeRedSlider: function(testPageDocument){
			// sets focus on a link before the Red slider
			testPageDocument.querySelector('#beforelink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "navForwardsToSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the Red slider",
  "specific_user_instruction": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
  "setupTestPage": "setFocusBeforeRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navForwardsToSlider",
        "command": "down down",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "f",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "virtualCursor",
        "presentationNumber": 1.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "pcCursor",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navForwardsToSlider",
        "command": "down down",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "f",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "browseMode",
        "presentationNumber": 1.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "focusMode",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navForwardsToSlider",
        "command": "ctrl+opt+right ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 5,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "defaultMode",
        "presentationNumber": 5.2,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "navForwardsToSlider": {
    "virtualCursor": {
      "jaws": [
        [ "down down|1" ],
        [ "f|1.1" ],
        [ "tab|1.2" ]
      ]
    },
    "pcCursor": { "jaws": [ [ "tab|1.3" ] ] },
    "browseMode": {
      "nvda": [
        [ "down down|1" ],
        [ "f|1.1" ],
        [ "tab|1.2" ]
      ]
    },
    "focusMode": { "nvda": [ [ "tab|1.3" ] ] },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+right ctrl+opt+right|5"
        ],
        [ "tab|5.2" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "j|5.1" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusBeforeRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 192`] = `
"{
  "task": "navForwardsToSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link before the Red slider",
  "specific_user_instruction": "Starting at the 'Navigate forwards from here' link, navigate to the 'Red' slider.",
  "setupTestPage": "setFocusBeforeRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navForwardsToSlider",
        "command": "down down",
        "settings": "virtualCursor",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "f",
        "settings": "virtualCursor",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "virtualCursor",
        "presentationNumber": 1.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "pcCursor",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navForwardsToSlider",
        "command": "down down",
        "settings": "browseMode",
        "presentationNumber": 1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "f",
        "settings": "browseMode",
        "presentationNumber": 1.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "browseMode",
        "presentationNumber": 1.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "focusMode",
        "presentationNumber": 1.3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navForwardsToSlider",
        "command": "ctrl+opt+right ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 5,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 5.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navForwardsToSlider",
        "command": "tab",
        "settings": "defaultMode",
        "presentationNumber": 5.2,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 193`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-06-navBackToSlider-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToSlider-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 194`] = `
"{
  "info": {
    "testId": "navBackToSlider",
    "title": "Navigate backwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusAfterRedSlider.html",
    "setupScript": {
      "script": "setFocusAfterRedSlider",
      "scriptDescription": "sets focus on a link after the Red slider",
      "name": "setFocusAfterRedSlider",
      "source": "// sets focus on a link after the Red slider\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterRedSlider.module.js",
      "jsonpPath": "scripts/setFocusAfterRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 2,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+f",
      "keypresses": [
        {
          "id": "shift+f",
          "keystroke": "Shift+f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+f",
      "presentationNumber": 2.1,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [
        {
          "priority": 2,
          "assertionId": "interactionModeEnabled"
        }
      ],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.2,
      "settings": "virtualCursor"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.3,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 195`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-06-navBackToSlider-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToSlider-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 196`] = `
"{
  "info": {
    "testId": "navBackToSlider",
    "title": "Navigate backwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusAfterRedSlider.html",
    "setupScript": {
      "script": "setFocusAfterRedSlider",
      "scriptDescription": "sets focus on a link after the Red slider",
      "name": "setFocusAfterRedSlider",
      "source": "// sets focus on a link after the Red slider\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterRedSlider.module.js",
      "jsonpPath": "scripts/setFocusAfterRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 2,
      "settings": "browseMode"
    },
    {
      "id": "shift+f",
      "keypresses": [
        {
          "id": "shift+f",
          "keystroke": "Shift+f"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+f",
      "presentationNumber": 2.1,
      "settings": "browseMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [
        {
          "priority": 2,
          "assertionId": "interactionModeEnabled"
        }
      ],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.2,
      "settings": "browseMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 2.3,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 197`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Navigate backwards to a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-06-navBackToSlider-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-06-navBackToSlider-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 198`] = `
"{
  "info": {
    "testId": "navBackToSlider",
    "title": "Navigate backwards to a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 6
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "singleQuickKeyNavOn",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode_singleQuickKeyNavOn",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusAfterRedSlider.html",
    "setupScript": {
      "script": "setFocusAfterRedSlider",
      "scriptDescription": "sets focus on a link after the Red slider",
      "name": "setFocusAfterRedSlider",
      "source": "// sets focus on a link after the Red slider\\ntestPageDocument.querySelector('#afterlink').focus();\\n",
      "modulePath": "scripts/setFocusAfterRedSlider.module.js",
      "jsonpPath": "scripts/setFocusAfterRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ],
      "singleQuickKeyNavOn": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
        "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+left ctrl+opt+left",
      "keypresses": [
        {
          "id": "ctrl+opt+left",
          "keystroke": "Control+Option+Left Arrow"
        },
        {
          "id": "ctrl+opt+left",
          "keystroke": "Control+Option+Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Left Arrow then Control+Option+Left Arrow",
      "presentationNumber": 6,
      "settings": "defaultMode"
    },
    {
      "id": "shift+tab",
      "keypresses": [
        {
          "id": "shift+tab",
          "keystroke": "Shift+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+Tab",
      "presentationNumber": 6.2,
      "settings": "defaultMode"
    },
    {
      "id": "shift+j",
      "keypresses": [
        {
          "id": "shift+j",
          "keystroke": "Shift+j"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Shift+j",
      "presentationNumber": 6.1,
      "settings": "singleQuickKeyNavOn"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 199`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Navigate backwards to a slider</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#slider" title="slider ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby" title="aria-labelledby ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation" title="aria-orientation ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin" title="aria-valuemin ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax" title="aria-valuemax ARIA Specification">

<script>
  let scripts = {
		setFocusAfterRedSlider: function(testPageDocument){
			// sets focus on a link after the Red slider
			testPageDocument.querySelector('#afterlink').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "navBackToSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the Red slider",
  "specific_user_instruction": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
  "setupTestPage": "setFocusAfterRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navBackToSlider",
        "command": "up",
        "settings": "virtualCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+f",
        "settings": "virtualCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "virtualCursor",
        "presentationNumber": 2.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "pcCursor",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navBackToSlider",
        "command": "up",
        "settings": "browseMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+f",
        "settings": "browseMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "browseMode",
        "presentationNumber": 2.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "focusMode",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navBackToSlider",
        "command": "ctrl+opt+left ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 6,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "defaultMode",
        "presentationNumber": 6.2,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "navBackToSlider": {
    "virtualCursor": {
      "jaws": [
        [ "up|2" ],
        [ "shift+f|2.1" ],
        [ "shift+tab|2.2" ]
      ]
    },
    "pcCursor": {
      "jaws": [ [ "shift+tab|2.3" ] ]
    },
    "browseMode": {
      "nvda": [
        [ "up|2" ],
        [ "shift+f|2.1" ],
        [ "shift+tab|2.2" ]
      ]
    },
    "focusMode": {
      "nvda": [ [ "shift+tab|2.3" ] ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+left ctrl+opt+left|6"
        ],
        [ "shift+tab|6.2" ]
      ]
    },
    "singleQuickKeyNavOn": {
      "voiceover_macos": [ [ "shift+j|6.1" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusAfterRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 200`] = `
"{
  "task": "navBackToSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode_singleQuickKeyNavOn",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on a link after the Red slider",
  "specific_user_instruction": "Starting at the 'Navigate backwards from here' link, navigate to the 'Red' slider.",
  "setupTestPage": "setFocusAfterRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "interactionModeEnabled",
      "priority": 0,
      "assertionStatement": "Screen reader switched from reading mode to interaction mode",
      "assertionPhrase": "switch from reading mode to interaction mode",
      "refIds": "slider",
      "tokenizedAssertionStatements": {
        "jaws": "JAWS switched from virtual cursor active to PC cursor active",
        "nvda": "NVDA switched from browse mode to focus mode"
      },
      "tokenizedAssertionPhrases": {
        "jaws": "switch from virtual cursor active to PC cursor active",
        "nvda": "switch from browse mode to focus mode"
      }
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "navBackToSlider",
        "command": "up",
        "settings": "virtualCursor",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+f",
        "settings": "virtualCursor",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "virtualCursor",
        "presentationNumber": 2.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "pcCursor",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "navBackToSlider",
        "command": "up",
        "settings": "browseMode",
        "presentationNumber": 2,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+f",
        "settings": "browseMode",
        "presentationNumber": 2.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "browseMode",
        "presentationNumber": 2.2,
        "assertionExceptions": "2:interactionModeEnabled"
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "focusMode",
        "presentationNumber": 2.3,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "navBackToSlider",
        "command": "ctrl+opt+left ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 6,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+j",
        "settings": "singleQuickKeyNavOn",
        "presentationNumber": 6.1,
        "assertionExceptions": ""
      },
      {
        "testId": "navBackToSlider",
        "command": "shift+tab",
        "settings": "defaultMode",
        "presentationNumber": 6.2,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 201`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-09-reqInfoAboutSlider-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutSlider-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 202`] = `
"{
  "info": {
    "testId": "reqInfoAboutSlider",
    "title": "Request information about a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "virtualCursor_pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, read information about the slider.",
    "mode": {
      "virtualCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
      ],
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 7,
      "settings": "virtualCursor"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 7.1,
      "settings": "virtualCursor"
    },
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 8,
      "settings": "pcCursor"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 8.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 203`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-09-reqInfoAboutSlider-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutSlider-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 204`] = `
"{
  "info": {
    "testId": "reqInfoAboutSlider",
    "title": "Request information about a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "browseMode_focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, read information about the slider.",
    "mode": {
      "browseMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
      ],
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 7,
      "settings": "browseMode"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 7.1,
      "settings": "browseMode"
    },
    {
      "id": "ins+tab",
      "keypresses": [
        {
          "id": "ins+tab",
          "keystroke": "Insert+Tab"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Tab",
      "presentationNumber": 8,
      "settings": "focusMode"
    },
    {
      "id": "ins+up",
      "keypresses": [
        {
          "id": "ins+up",
          "keystroke": "Insert+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Insert+Up Arrow",
      "presentationNumber": 8.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 205`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Request information about a slider</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#slider">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax">
    <link rel="preload" href="test-09-reqInfoAboutSlider-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-09-reqInfoAboutSlider-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 206`] = `
"{
  "info": {
    "testId": "reqInfoAboutSlider",
    "title": "Request information about a slider",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "slider",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#slider",
        "linkText": "slider ARIA Specification"
      },
      {
        "refId": "aria-labelledby",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-labelledby",
        "linkText": "aria-labelledby ARIA Specification"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      },
      {
        "refId": "aria-orientation",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-orientation",
        "linkText": "aria-orientation ARIA Specification"
      },
      {
        "refId": "aria-valuemin",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemin",
        "linkText": "aria-valuemin ARIA Specification"
      },
      {
        "refId": "aria-valuemax",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuemax",
        "linkText": "aria-valuemax ARIA Specification"
      }
    ],
    "presentationNumber": 9
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "virtualCursor",
        "name": "JAWS"
      },
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "browseMode",
        "name": "NVDA"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, read information about the slider.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "ctrl+opt+f3",
      "keypresses": [
        {
          "id": "ctrl+opt+f3",
          "keystroke": "Control+Option+F3"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+F3",
      "presentationNumber": 9,
      "settings": "defaultMode"
    },
    {
      "id": "ctrl+opt+f4",
      "keypresses": [
        {
          "id": "ctrl+opt+f4",
          "keystroke": "Control+Option+F4"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+F4",
      "presentationNumber": 9.1,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 207`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Request information about a slider</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#slider" title="slider ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-labelledby" title="aria-labelledby ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-orientation" title="aria-orientation ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemin" title="aria-valuemin ARIA Specification">
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuemax" title="aria-valuemax ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "reqInfoAboutSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, read information about the slider.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "virtualCursor",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "virtualCursor",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "pcCursor",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "pcCursor",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "browseMode",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "browseMode",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "focusMode",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "focusMode",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ctrl+opt+f3",
        "settings": "defaultMode",
        "presentationNumber": 9,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ctrl+opt+f4",
        "settings": "defaultMode",
        "presentationNumber": 9.1,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "reqInfoAboutSlider": {
    "virtualCursor": {
      "jaws": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "pcCursor": {
      "jaws": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "browseMode": {
      "nvda": [
        [ "ins+tab|7" ],
        [ "ins+up|7.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "ins+tab|8" ],
        [ "ins+up|8.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [ "ctrl+opt+f3|9" ],
        [ "ctrl+opt+f4|9.1" ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 208`] = `
"{
  "task": "reqInfoAboutSlider",
  "mode": "virtualCursor_pcCursor_browseMode_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, read information about the slider.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "roleSlider",
      "priority": 1,
      "assertionStatement": "Role 'slider' is conveyed",
      "assertionPhrase": "convey role 'slider'",
      "refIds": "slider",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "nameRed",
      "priority": 1,
      "assertionStatement": "Name 'Red' is conveyed",
      "assertionPhrase": "convey name 'Red'",
      "refIds": "aria-labelledby",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "value128",
      "priority": 1,
      "assertionStatement": "Value '128' is conveyed",
      "assertionPhrase": "convey value '128'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "orientationHorizontal",
      "priority": 3,
      "assertionStatement": "Orientation 'horizontal' is conveyed",
      "assertionPhrase": "convey orientation 'horizontal'",
      "refIds": "aria-orientation",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "minimumValue0",
      "priority": 2,
      "assertionStatement": "Minimum value '0' is conveyed",
      "assertionPhrase": "convey minimum value '0'",
      "refIds": "aria-valuemin",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    },
    {
      "assertionId": "maximumValue255",
      "priority": 2,
      "assertionStatement": "Maximum value '255' is conveyed",
      "assertionPhrase": "convey maximum value '255'",
      "refIds": "aria-valuemax",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "virtualCursor",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "virtualCursor",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "pcCursor",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "pcCursor",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "browseMode",
        "presentationNumber": 7,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "browseMode",
        "presentationNumber": 7.1,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+tab",
        "settings": "focusMode",
        "presentationNumber": 8,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ins+up",
        "settings": "focusMode",
        "presentationNumber": 8.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "reqInfoAboutSlider",
        "command": "ctrl+opt+f3",
        "settings": "defaultMode",
        "presentationNumber": 9,
        "assertionExceptions": ""
      },
      {
        "testId": "reqInfoAboutSlider",
        "command": "ctrl+opt+f4",
        "settings": "defaultMode",
        "presentationNumber": 9.1,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 209`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-11-incrementSliderByOneStep-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-incrementSliderByOneStep-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 210`] = `
"{
  "info": {
    "testId": "incrementSliderByOneStep",
    "title": "Increment a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 11
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 129.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "right",
      "keypresses": [
        {
          "id": "right",
          "keystroke": "Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Right Arrow",
      "presentationNumber": 10,
      "settings": "pcCursor"
    },
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 10.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 211`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-11-incrementSliderByOneStep-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-incrementSliderByOneStep-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 212`] = `
"{
  "info": {
    "testId": "incrementSliderByOneStep",
    "title": "Increment a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 11
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 129.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "right",
      "keypresses": [
        {
          "id": "right",
          "keystroke": "Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Right Arrow",
      "presentationNumber": 10,
      "settings": "focusMode"
    },
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 10.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 213`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-11-incrementSliderByOneStep-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-11-incrementSliderByOneStep-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 214`] = `
"{
  "info": {
    "testId": "incrementSliderByOneStep",
    "title": "Increment a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 11
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "quickNavOff_defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 129.",
    "mode": {
      "quickNavOff": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
        "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
      ],
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "right",
      "keypresses": [
        {
          "id": "right",
          "keystroke": "Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Right Arrow",
      "presentationNumber": 11,
      "settings": "quickNavOff"
    },
    {
      "id": "up",
      "keypresses": [
        {
          "id": "up",
          "keystroke": "Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Up Arrow",
      "presentationNumber": 11.1,
      "settings": "quickNavOff"
    },
    {
      "id": "ctrl+opt+shift+down ctrl+opt+up",
      "keypresses": [
        {
          "id": "ctrl+opt+shift+down",
          "keystroke": "Control+Option+Shift+Down Arrow"
        },
        {
          "id": "ctrl+opt+up",
          "keystroke": "Control+Option+Up Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Shift+Down Arrow then Control+Option+Up Arrow",
      "presentationNumber": 11.2,
      "settings": "defaultMode"
    },
    {
      "id": "ctrl+opt+shift+down ctrl+opt+right",
      "keypresses": [
        {
          "id": "ctrl+opt+shift+down",
          "keystroke": "Control+Option+Shift+Down Arrow"
        },
        {
          "id": "ctrl+opt+right",
          "keystroke": "Control+Option+Right Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Shift+Down Arrow then Control+Option+Right Arrow",
      "presentationNumber": 11.3,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 215`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Increment a slider by one step</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "incrementSliderByOneStep",
  "mode": "pcCursor_focusMode_quickNavOff_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 129.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "pcCursor",
        "presentationNumber": 10,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "pcCursor",
        "presentationNumber": 10.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "focusMode",
        "presentationNumber": 10,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "focusMode",
        "presentationNumber": 10.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "quickNavOff",
        "presentationNumber": 11,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "quickNavOff",
        "presentationNumber": 11.1,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+up",
        "settings": "defaultMode",
        "presentationNumber": 11.2,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 11.3,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "incrementSliderByOneStep": {
    "pcCursor": {
      "jaws": [
        [ "right|10" ],
        [ "up|10.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "right|10" ],
        [ "up|10.1" ]
      ]
    },
    "quickNavOff": {
      "voiceover_macos": [
        [ "right|11" ],
        [ "up|11.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+shift+down ctrl+opt+up|11.2"
        ],
        [
          "ctrl+opt+shift+down ctrl+opt+right|11.3"
        ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 216`] = `
"{
  "task": "incrementSliderByOneStep",
  "mode": "pcCursor_focusMode_quickNavOff_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 129.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value129",
      "priority": 1,
      "assertionStatement": "Value '129' is conveyed",
      "assertionPhrase": "convey value '129'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "pcCursor",
        "presentationNumber": 10,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "pcCursor",
        "presentationNumber": 10.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "focusMode",
        "presentationNumber": 10,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "focusMode",
        "presentationNumber": 10.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderByOneStep",
        "command": "right",
        "settings": "quickNavOff",
        "presentationNumber": 11,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "up",
        "settings": "quickNavOff",
        "presentationNumber": 11.1,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+up",
        "settings": "defaultMode",
        "presentationNumber": 11.2,
        "assertionExceptions": ""
      },
      {
        "testId": "incrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+right",
        "settings": "defaultMode",
        "presentationNumber": 11.3,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 217`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-13-decrementSliderByOneStep-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-decrementSliderByOneStep-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 218`] = `
"{
  "info": {
    "testId": "decrementSliderByOneStep",
    "title": "Decrement a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 13
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 127.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "left",
      "keypresses": [
        {
          "id": "left",
          "keystroke": "Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Left Arrow",
      "presentationNumber": 12,
      "settings": "pcCursor"
    },
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 12.1,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 219`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-13-decrementSliderByOneStep-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-decrementSliderByOneStep-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 220`] = `
"{
  "info": {
    "testId": "decrementSliderByOneStep",
    "title": "Decrement a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 13
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 127.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "left",
      "keypresses": [
        {
          "id": "left",
          "keystroke": "Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Left Arrow",
      "presentationNumber": 12,
      "settings": "focusMode"
    },
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 12.1,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 221`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by one step</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-13-decrementSliderByOneStep-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-13-decrementSliderByOneStep-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 222`] = `
"{
  "info": {
    "testId": "decrementSliderByOneStep",
    "title": "Decrement a slider by one step",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 13
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "quickNavOff",
        "name": "VoiceOver for macOS"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "quickNavOff_defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 127.",
    "mode": {
      "quickNavOff": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
        "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
      ],
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "left",
      "keypresses": [
        {
          "id": "left",
          "keystroke": "Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Left Arrow",
      "presentationNumber": 13,
      "settings": "quickNavOff"
    },
    {
      "id": "down",
      "keypresses": [
        {
          "id": "down",
          "keystroke": "Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Down Arrow",
      "presentationNumber": 13.1,
      "settings": "quickNavOff"
    },
    {
      "id": "ctrl+opt+shift+down ctrl+opt+down",
      "keypresses": [
        {
          "id": "ctrl+opt+shift+down",
          "keystroke": "Control+Option+Shift+Down Arrow"
        },
        {
          "id": "ctrl+opt+down",
          "keystroke": "Control+Option+Down Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Shift+Down Arrow then Control+Option+Down Arrow",
      "presentationNumber": 13.2,
      "settings": "defaultMode"
    },
    {
      "id": "ctrl+opt+shift+down ctrl+opt+left",
      "keypresses": [
        {
          "id": "ctrl+opt+shift+down",
          "keystroke": "Control+Option+Shift+Down Arrow"
        },
        {
          "id": "ctrl+opt+left",
          "keystroke": "Control+Option+Left Arrow"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Control+Option+Shift+Down Arrow then Control+Option+Left Arrow",
      "presentationNumber": 13.3,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 223`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Decrement a slider by one step</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "decrementSliderByOneStep",
  "mode": "pcCursor_focusMode_quickNavOff_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 127.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "pcCursor",
        "presentationNumber": 12,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "pcCursor",
        "presentationNumber": 12.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "focusMode",
        "presentationNumber": 12,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "focusMode",
        "presentationNumber": 12.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "quickNavOff",
        "presentationNumber": 13,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "quickNavOff",
        "presentationNumber": 13.1,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+down",
        "settings": "defaultMode",
        "presentationNumber": 13.2,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 13.3,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "decrementSliderByOneStep": {
    "pcCursor": {
      "jaws": [
        [ "left|12" ],
        [ "down|12.1" ]
      ]
    },
    "focusMode": {
      "nvda": [
        [ "left|12" ],
        [ "down|12.1" ]
      ]
    },
    "quickNavOff": {
      "voiceover_macos": [
        [ "left|13" ],
        [ "down|13.1" ]
      ]
    },
    "defaultMode": {
      "voiceover_macos": [
        [
          "ctrl+opt+shift+down ctrl+opt+down|13.2"
        ],
        [
          "ctrl+opt+shift+down ctrl+opt+left|13.3"
        ]
      ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 224`] = `
"{
  "task": "decrementSliderByOneStep",
  "mode": "pcCursor_focusMode_quickNavOff_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 127.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value127",
      "priority": 1,
      "assertionStatement": "Value '127' is conveyed",
      "assertionPhrase": "convey value '127'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "pcCursor",
        "presentationNumber": 12,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "pcCursor",
        "presentationNumber": 12.1,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "focusMode",
        "presentationNumber": 12,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "focusMode",
        "presentationNumber": 12.1,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderByOneStep",
        "command": "left",
        "settings": "quickNavOff",
        "presentationNumber": 13,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "down",
        "settings": "quickNavOff",
        "presentationNumber": 13.1,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+down",
        "settings": "defaultMode",
        "presentationNumber": 13.2,
        "assertionExceptions": ""
      },
      {
        "testId": "decrementSliderByOneStep",
        "command": "ctrl+opt+shift+down ctrl+opt+left",
        "settings": "defaultMode",
        "presentationNumber": 13.3,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 225`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-15-incrementSliderByTenSteps-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-15-incrementSliderByTenSteps-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 226`] = `
"{
  "info": {
    "testId": "incrementSliderByTenSteps",
    "title": "Increment a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 15
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 138.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "pageUp",
      "keypresses": [
        {
          "id": "pageUp",
          "keystroke": "Page Up"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Up",
      "presentationNumber": 14,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 227`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-15-incrementSliderByTenSteps-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-15-incrementSliderByTenSteps-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 228`] = `
"{
  "info": {
    "testId": "incrementSliderByTenSteps",
    "title": "Increment a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 15
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 138.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "pageUp",
      "keypresses": [
        {
          "id": "pageUp",
          "keystroke": "Page Up"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Up",
      "presentationNumber": 14,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 229`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-15-incrementSliderByTenSteps-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-15-incrementSliderByTenSteps-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 230`] = `
"{
  "info": {
    "testId": "incrementSliderByTenSteps",
    "title": "Increment a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 15
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 138.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "pageUp",
      "keypresses": [
        {
          "id": "pageUp",
          "keystroke": "Page Up"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Up",
      "presentationNumber": 15,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 231`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Increment a slider by ten steps</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "incrementSliderByTenSteps",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 138.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "pcCursor",
        "presentationNumber": 14,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "focusMode",
        "presentationNumber": 14,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "defaultMode",
        "presentationNumber": 15,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "incrementSliderByTenSteps": {
    "pcCursor": { "jaws": [ [ "pageUp|14" ] ] },
    "focusMode": { "nvda": [ [ "pageUp|14" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "pageUp|15" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 232`] = `
"{
  "task": "incrementSliderByTenSteps",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 138.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value138",
      "priority": 1,
      "assertionStatement": "Value '138' is conveyed",
      "assertionPhrase": "convey value '138'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "pcCursor",
        "presentationNumber": 14,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "focusMode",
        "presentationNumber": 14,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderByTenSteps",
        "command": "pageUp",
        "settings": "defaultMode",
        "presentationNumber": 15,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 233`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-17-decrementSliderByTenSteps-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-decrementSliderByTenSteps-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 234`] = `
"{
  "info": {
    "testId": "decrementSliderByTenSteps",
    "title": "Decrement a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 17
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 118.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "pageDown",
      "keypresses": [
        {
          "id": "pageDown",
          "keystroke": "Page Down"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Down",
      "presentationNumber": 16,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 235`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-17-decrementSliderByTenSteps-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-decrementSliderByTenSteps-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 236`] = `
"{
  "info": {
    "testId": "decrementSliderByTenSteps",
    "title": "Decrement a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 17
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 118.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "pageDown",
      "keypresses": [
        {
          "id": "pageDown",
          "keystroke": "Page Down"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Down",
      "presentationNumber": 16,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 237`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider by ten steps</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-17-decrementSliderByTenSteps-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-17-decrementSliderByTenSteps-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 238`] = `
"{
  "info": {
    "testId": "decrementSliderByTenSteps",
    "title": "Decrement a slider by ten steps",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 17
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 118.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "pageDown",
      "keypresses": [
        {
          "id": "pageDown",
          "keystroke": "Page Down"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Page Down",
      "presentationNumber": 17,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 239`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Decrement a slider by ten steps</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "decrementSliderByTenSteps",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 118.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "pcCursor",
        "presentationNumber": 16,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "focusMode",
        "presentationNumber": 16,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "defaultMode",
        "presentationNumber": 17,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "decrementSliderByTenSteps": {
    "pcCursor": { "jaws": [ [ "pageDown|16" ] ] },
    "focusMode": { "nvda": [ [ "pageDown|16" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "pageDown|17" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 240`] = `
"{
  "task": "decrementSliderByTenSteps",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 118.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value118",
      "priority": 1,
      "assertionStatement": "Value '118' is conveyed",
      "assertionPhrase": "convey value '118'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "pcCursor",
        "presentationNumber": 16,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "focusMode",
        "presentationNumber": 16,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderByTenSteps",
        "command": "pageDown",
        "settings": "defaultMode",
        "presentationNumber": 17,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 241`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider to the minimum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-19-decrementSliderToMinimumValue-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-decrementSliderToMinimumValue-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 242`] = `
"{
  "info": {
    "testId": "decrementSliderToMinimumValue",
    "title": "Decrement a slider to the minimum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 19
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 0.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "home",
      "keypresses": [
        {
          "id": "home",
          "keystroke": "Home"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Home",
      "presentationNumber": 18,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 243`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider to the minimum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-19-decrementSliderToMinimumValue-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-decrementSliderToMinimumValue-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 244`] = `
"{
  "info": {
    "testId": "decrementSliderToMinimumValue",
    "title": "Decrement a slider to the minimum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 19
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 0.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "home",
      "keypresses": [
        {
          "id": "home",
          "keystroke": "Home"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Home",
      "presentationNumber": 18,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 245`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Decrement a slider to the minimum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-19-decrementSliderToMinimumValue-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-19-decrementSliderToMinimumValue-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 246`] = `
"{
  "info": {
    "testId": "decrementSliderToMinimumValue",
    "title": "Decrement a slider to the minimum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 19
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 0.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "home",
      "keypresses": [
        {
          "id": "home",
          "keystroke": "Home"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "Home",
      "presentationNumber": 19,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 247`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Decrement a slider to the minimum value</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "decrementSliderToMinimumValue",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 0.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "pcCursor",
        "presentationNumber": 18,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "focusMode",
        "presentationNumber": 18,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "defaultMode",
        "presentationNumber": 19,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "decrementSliderToMinimumValue": {
    "pcCursor": { "jaws": [ [ "home|18" ] ] },
    "focusMode": { "nvda": [ [ "home|18" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "home|19" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 248`] = `
"{
  "task": "decrementSliderToMinimumValue",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 0.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value0",
      "priority": 1,
      "assertionStatement": "Value '0' is conveyed",
      "assertionPhrase": "convey value '0'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "pcCursor",
        "presentationNumber": 18,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "focusMode",
        "presentationNumber": 18,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "decrementSliderToMinimumValue",
        "command": "home",
        "settings": "defaultMode",
        "presentationNumber": 19,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;

exports[`all test format versions runs createAllTests successfully 249`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider to the maximum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-21-incrementSliderToMaximumValue-jaws.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-incrementSliderToMaximumValue-jaws.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 250`] = `
"{
  "info": {
    "testId": "incrementSliderToMaximumValue",
    "title": "Increment a slider to the maximum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 21
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "jaws",
      "settings": "pcCursor",
      "name": "JAWS",
      "raw": {
        "name": "JAWS",
        "key": "jaws",
        "defaultConfigurationInstructionsHTML": "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "JAWS",
          "interactionMode": "PC cursor active",
          "readingMode": "virtual cursor active",
          "readingCursor": "virtual cursor"
        },
        "settings": {
          "virtualCursor": {
            "screenText": "virtual cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the PC cursor is active, press &lt;kbd&gt;Escape&lt;/kbd&gt; to activate the virtual cursor."
            ]
          },
          "pcCursor": {
            "screenText": "PC cursor active",
            "instructions": [
              "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
              "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 255.",
    "mode": {
      "pcCursor": [
        "Configure JAWS with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt; to determine which cursor is active.",
        "If the virtual cursor is active, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;z&lt;/kbd&gt; to disable the virtual cursor."
      ]
    }
  },
  "commands": [
    {
      "id": "end",
      "keypresses": [
        {
          "id": "end",
          "keystroke": "End"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "End",
      "presentationNumber": 20,
      "settings": "pcCursor"
    }
  ],
  "assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 251`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider to the maximum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-21-incrementSliderToMaximumValue-nvda.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-incrementSliderToMaximumValue-nvda.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 252`] = `
"{
  "info": {
    "testId": "incrementSliderToMaximumValue",
    "title": "Increment a slider to the maximum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 21
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "nvda",
      "settings": "focusMode",
      "name": "NVDA",
      "raw": {
        "name": "NVDA",
        "key": "nvda",
        "defaultConfigurationInstructionsHTML": "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "NVDA",
          "interactionMode": "focus mode",
          "readingMode": "browse mode",
          "readingCursor": "browse mode caret"
        },
        "settings": {
          "browseMode": {
            "screenText": "browse mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the focus mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn browse mode back on."
            ]
          },
          "focusMode": {
            "screenText": "focus mode on",
            "instructions": [
              "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
              "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 255.",
    "mode": {
      "focusMode": [
        "Configure NVDA with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "Press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt;.",
        "If NVDA made the browse mode sound, press &lt;kbd&gt;Insert&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; again to turn focus mode back on."
      ]
    }
  },
  "commands": [
    {
      "id": "end",
      "keypresses": [
        {
          "id": "end",
          "keystroke": "End"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "End",
      "presentationNumber": 20,
      "settings": "focusMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 253`] = `
"<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Increment a slider to the maximum value</title>
    <link rel="help" href="https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/">
    <link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow">
    <link rel="preload" href="test-21-incrementSliderToMaximumValue-voiceover_macos.collected.json" as="fetch">
    <style>
      table {
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      table, td, th {
        border: 1px solid black;
      }

      td {
        padding: .5em;
      }

      table.record-results tr:first-child {
        font-weight: bold;
      }

      textarea {
        width: 100%
      }

      fieldset.problem-select {
        margin-top: 1em;
        margin-left: 1em;
      }

      div.problem-option-container.enabled {
        margin-bottom: 0.5em;
      }

      div.problem-option-container:last-child {
        margin-bottom: 0;
      }

      fieldset.assertions {
        margin-bottom: 1em;
      }

      label.assertion {
        display: block;
      }

      .required:not(.highlight-required) {
        display: none;
      }

      .required-other:not(.highlight-required) {
        display: none;
      }

      .required.highlight-required {
        color: red;
      }

      fieldset.highlight-required {
        border-color: red;
      }

      fieldset .highlight-required {
        color: red;
      }

      .off-screen {
        position: absolute !important;
        height: 1px;
        width: 1px;
        overflow: hidden;
        clip: rect(1px, 1px, 1px, 1px);
        white-space: nowrap;
      }
    </style>
  </head>
  <body>
    <script type="module">
      import {loadCollectedTestAsync} from "../resources/aria-at-harness.mjs";
      loadCollectedTestAsync(new URL(location + "/..").pathname, "test-21-incrementSliderToMaximumValue-voiceover_macos.collected.json");
    </script>
  </body>
</html>
"
`;

exports[`all test format versions runs createAllTests successfully 254`] = `
"{
  "info": {
    "testId": "incrementSliderToMaximumValue",
    "title": "Increment a slider to the maximum value",
    "references": [
      {
        "refId": "example",
        "type": "metadata",
        "value": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/examples/slider-color-viewer/",
        "linkText": "APG Example: Color Viewer Slider"
      },
      {
        "refId": "aria-valuenow",
        "type": "aria",
        "value": "https://www.w3.org/TR/wai-aria/#aria-valuenow",
        "linkText": "aria-valuenow ARIA Specification"
      }
    ],
    "presentationNumber": 21
  },
  "target": {
    "ats": [
      {
        "key": "jaws",
        "settings": "pcCursor",
        "name": "JAWS"
      },
      {
        "key": "nvda",
        "settings": "focusMode",
        "name": "NVDA"
      },
      {
        "key": "voiceover_macos",
        "settings": "defaultMode",
        "name": "VoiceOver for macOS"
      }
    ],
    "at": {
      "key": "voiceover_macos",
      "settings": "defaultMode",
      "name": "VoiceOver for macOS",
      "raw": {
        "name": "VoiceOver for macOS",
        "key": "voiceover_macos",
        "defaultConfigurationInstructionsHTML": "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;.",
        "assertionTokens": {
          "screenReader": "VoiceOver",
          "readingCursor": "VoiceOver cursor"
        },
        "settings": {
          "quickNavOn": {
            "screenText": "quick nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "quickNavOff": {
            "screenText": "quick nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'quick nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "arrowQuickKeyNavOn": {
            "screenText": "arrow quick key nav on",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav off', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "arrowQuickKeyNavOff": {
            "screenText": "arrow quick key nav off",
            "instructions": [
              "Simultaneously press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt;.",
              "If VoiceOver said 'arrow quick key nav on', press &lt;kbd&gt;Left Arrow&lt;/kbd&gt; and &lt;kbd&gt;Right Arrow&lt;/kbd&gt; again to turn it back off."
            ]
          },
          "singleQuickKeyNavOn": {
            "screenText": "single quick key nav on",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav off', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back on."
            ]
          },
          "singleQuickKeyNavOff": {
            "screenText": "single quick key nav off",
            "instructions": [
              "Press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt;.",
              "If VoiceOver said 'single quick key nav on', press &lt;kbd&gt;Control&lt;/kbd&gt;+&lt;kbd&gt;Option&lt;/kbd&gt;+&lt;kbd&gt;q&lt;/kbd&gt; again to turn it back off."
            ]
          }
        }
      }
    },
    "referencePage": "reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html",
    "setupScript": {
      "script": "setFocusOnRedSlider",
      "scriptDescription": "sets focus on the 'Red' slider",
      "name": "setFocusOnRedSlider",
      "source": "// sets focus on the 'Red' slider\\ntestPageDocument.querySelector('[role=\\"slider\\"].red').focus();\\n",
      "modulePath": "scripts/setFocusOnRedSlider.module.js",
      "jsonpPath": "scripts/setFocusOnRedSlider.jsonp.js"
    }
  },
  "instructions": {
    "instructions": "Starting at the 'Red' slider, set its value to 255.",
    "mode": {
      "defaultMode": [
        "Configure VoiceOver with default settings. For help, read &lt;a href=&quot;https://github.com/w3c/aria-at/wiki/Configuring-Screen-Readers-for-Testing&quot;&gt;Configuring Screen Readers for Testing&lt;/a&gt;."
      ]
    }
  },
  "commands": [
    {
      "id": "end",
      "keypresses": [
        {
          "id": "end",
          "keystroke": "End"
        }
      ],
      "assertionExceptions": [],
      "keystroke": "End",
      "presentationNumber": 21,
      "settings": "defaultMode"
    }
  ],
  "assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ]
}"
`;

exports[`all test format versions runs createAllTests successfully 255`] = `
"
<!DOCTYPE html>
<meta charset="utf-8">
<title>Increment a slider to the maximum value</title>
<link rel="help" href="https://www.w3.org/TR/wai-aria/#aria-valuenow" title="aria-valuenow ARIA Specification">

<script>
  let scripts = {
		setFocusOnRedSlider: function(testPageDocument){
			// sets focus on the 'Red' slider
			testPageDocument.querySelector('[role="slider"].red').focus();
		}
	};
</script>
<script type="module">
  import { initialize, verifyATBehavior, displayTestPageAndInstructions } from "../resources/aria-at-harness.mjs";

  new Promise((resolve) => {
    fetch('../support.json')
      .then(response => resolve(response.json()))
    }).then(supportJson => {
      return fetch('../commands.json')
        .then(response => response.json())
        .then(allCommandsJson => ({ supportJson, allCommandsJson })
      );
    })
  .then(({ supportJson, allCommandsJson }) => {
    const testJson = {
  "task": "incrementSliderToMaximumValue",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 255.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "pcCursor",
        "presentationNumber": 20,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "focusMode",
        "presentationNumber": 20,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "defaultMode",
        "presentationNumber": 21,
        "assertionExceptions": ""
      }
    ]
  }
};
    const commandJson = {
  "incrementSliderToMaximumValue": {
    "pcCursor": { "jaws": [ [ "end|20" ] ] },
    "focusMode": { "nvda": [ [ "end|20" ] ] },
    "defaultMode": {
      "voiceover_macos": [ [ "end|21" ] ]
    }
  }
};
    initialize(supportJson, commandJson, allCommandsJson);
    verifyATBehavior(testJson);
    displayTestPageAndInstructions("reference/2022-4-11_11511/slider-color-viewer.setFocusOnRedSlider.html");
  });
</script>
  "
`;

exports[`all test format versions runs createAllTests successfully 256`] = `
"{
  "task": "incrementSliderToMaximumValue",
  "mode": "pcCursor_focusMode_defaultMode",
  "applies_to": [
    "jaws",
    "nvda",
    "voiceover_macos"
  ],
  "setup_script_description": "sets focus on the 'Red' slider",
  "specific_user_instruction": "Starting at the 'Red' slider, set its value to 255.",
  "setupTestPage": "setFocusOnRedSlider",
  "testPlanStrings": {
    "ariaSpecsPreface": "Tested ARIA features:",
    "openExampleInstruction": "Activate the &quot;Open test page&quot; button, which opens the example to test in a new window and runs a script that",
    "commandListPreface": "Do this with each of the following commands or command sequences.",
    "commandListSettingsPreface": "If any settings are specified in parentheses, ensure the settings are active before executing the command or command sequence.",
    "settingInstructionsPreface": "To perform a task with",
    "assertionResponseQuestion": "Which statements are true about the response to"
  },
  "output_assertions": [
    {
      "assertionId": "value255",
      "priority": 1,
      "assertionStatement": "Value '255' is conveyed",
      "assertionPhrase": "convey value '255'",
      "refIds": "aria-valuenow",
      "tokenizedAssertionStatements": {},
      "tokenizedAssertionPhrases": {}
    }
  ],
  "commandsInfo": {
    "jaws": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "pcCursor",
        "presentationNumber": 20,
        "assertionExceptions": ""
      }
    ],
    "nvda": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "focusMode",
        "presentationNumber": 20,
        "assertionExceptions": ""
      }
    ],
    "voiceover_macos": [
      {
        "testId": "incrementSliderToMaximumValue",
        "command": "end",
        "settings": "defaultMode",
        "presentationNumber": 21,
        "assertionExceptions": ""
      }
    ]
  }
}"
`;
